<meta>index: tags<>
# <#>Bash<> Sheet
<meta>index: none<>
<b>Find It Faster<>

This is an interactive <b>Bash<> cheat sheet. Covers the core Bash scripting language. Use the search to instantly get answers. Bash is an <c>sh<> compatible command language used to run and manage processes on Linux and Unix systems.

<table><col><b>Basics<>

<*><link "?q=fundamentals-only">Bash Fundamentals<>
<link "?q=naming-conventions-only">Naming Conventions<><>

<*><link "?q=command-execution-only">Command Execution<>
<link "?q=parameters-only">Command Parameters<>
<link "?q=config-files-only">Configuration Files<>
<link "?q=control-only">Control Structures<>
<link "?q=debug-only">Debugging<>
<link "?q=exit-only">Exit<>
<link "?q=files-only">Files<>
<link "?q=functions-only">Functions<>
<link "?q=operators-only">Operators<>
<link "?q=processes-only">Processes<>
<link "?q=redirect-only">Redirecting IO<>
<link "?q=user-only">Users<><>

<*><link "?q=how-to-only">How To<><>

<b>Reference<>

<*><link "?q=acronyms-only">Acronyms<>
<link "?q=color+table">Colors<>
<link "?q=exit-codes-only">Exit Codes<>
<link "?q=symbols-only">Symbols<>
<link "?q=terms-only">Terms<><><><col>	<><col><b>Data Types<>

<*><link "?q=variables-only">Variables<>
<link "?q=literals-only">Literals<><>

<*><link "?q=boolean-only">Boolean<>
<link "?q=integer-only">Integer<>
<link "?q=string-only">String<>
<link "?q=array-only">Array<>
<link "?q=associative-array-only">Associative Array<><>

<b>Control Structures<>

<*><link "?q=if-only">If<>
<link "?q=case-only">Case<>
<link "?q=for-only">For<>
<link "?q=until-only">Until<>
<link "?q=while-only">While<><><><>


# Online Docs

##### GNU Bash Manual
<l>https://www.gnu.org/software/bash/manual/bash.html<>


##### Linux Man Pages
<l>https://man7.org/linux/man-pages/index.html<>



# Hello World
@
@ examples



### Hello World

Script:

<cb>echo "Hello world!"<>


Create The Script (from the command line):

<cb>cat > hello_world
echo "Hello world!"<>

Save:

<cb>Ctrl + D<>

Run:

<cb>bash hello_world<>


### Hello World - Read Input

Create and run the hello_world script.

Script:

<cb>\#!/usr/bin/env bash

read -p "Name: " <v>name<>
echo "Hello $<v>name<>!"<>


Create The Script (from the command line):

<cb>cat > hello_world
\#!/usr/bin/env bash

read -p "Name: " <v>name<>
echo "Hello $<v>name<>!"<>

Save:

<cb>Ctrl + D<>

Set Permissions:

<cb>chmod u+x hello_world<>

Run:

<cb>./hello_world<>



### Hello World - Read Command-line Argument or Ask

Create and run hello_world script.

This will take the name from the script parameter or ask if none is present. This example uses functions.

Script:

<cb>#!/usr/bin/env bash

get_name() {
	read -p "Name: " <v>name<>
}

print_hello() {
	local <v>name<>="$@"
	echo "$<v>name<>"
}

if [[ -z "$1" ]]; then
	get_name
else
	<v>name<>="$@"
fi

print_hello "$<v>name<>"<>


Create and edit the script in your favorite text editor (file name 'hello_world').

Set Permissions:

<cb>chmod u+x hello_world<>

Run:

<cb>./hello_world<>



# Bash Fundamentals
@
@ language-fundamentals-only, fundamentals-only, bash-fundamentals-only


### Startup / Configuration Files

When Logging in:

<cb>.bash_profile<>

Non Login Starts:

<cb>.bashrc				<#>#1<><>


\#1  <s>-<>  Called from <c>.bash_profile<>



### Bash Script Identifier (Shebang)

<cb>#!<v>...<><>

<cb>#!/usr/bin/env bash<>


Tells the shell how to run the script (i.e. use bash).

Must be the first line in script.
@
@ #!


#### Shebang - Bash, Latest Available Version

<cb>#!/usr/bin/env bash<>


#### Shebang - Bash

<cb>#!/bin/bash<>


Tells the shell to run this script using bash.


#### Shebang - Sh

<cb>#!/bin/sh<>


Tells the shell to run this script using sh.


#### Shebang - Python 3

<cb>#!/usr/bin/env python3<>


Tells the shell to run this script using Python.


#### Shebang - Zsh

<cb>#!/bin/zsh<>


Tells the shell to run this script using zsh.



### Comments

<cb><#># Comments - Single Line<><>
@
@ \#



### Document Comments

<cb><#># This is a doc comment.<>
<v>function_1<>() {
	<v>...<>
}<>

<cb><#># This is a doc comment.
\# Add context to the
\# following function.<>
<v>function_1<>() {
	<v>...<>
}<>


Place doc comments before functions.

Use regular comment syntax, a single hash <#><c>#<><> before the text.
@
@ code, documentation, docstring-only, docstr-only, doc-string-only, doc-str-only



### Escape

<c>\\<v>x<><>

Use a backslash to escape a character.
@
@ escaping



### Identifiers

<cb>( <v>letter<> | _ )( <v>letter<> | <v>digit<> | _ )*<>

Regex Form:

<cb>[_a-zA-Z][_0-9a-zA-Z]*<>

Identifiers are case sensitive.
The first character must be an alphabet letter or underscore, not a digit.
All other characters can be alphabet letters, underscores or digits.


Examples:

<cb><v>simple<><>

<cb><v>_underscore<><>

<cb><v>with_underscore<><>

<cb><v>with_123<><>
@
@ names, variable names, function names
@ Rules, Valid, allowable, allowed, Correct



### Scope

<*>Global / Environment
Local<>


Local is local to a function.



### Separator - Directory

<cb>/<>
@
@ File Separators


### Separator - Path

<cb>:<>
@
@ File Separators



### Separator - Script Command

<cb>;<>
@
@ Terminator



### Statement - Multiline Statement

<cb><v>...<> \\
<v>...<><>

The '\\' at the end of the line indicates the line continues on next line.


Example:

<cb>echo "<v>Part 1 and<>" \\
	 "<v>part 2 and<>" \\
	 "<v>part 3.<>"

<#># Prints: Part 1 and part 2 and part 3.<><>
@
@ Split, Separate, Separator, Wrap, multiline statement, \\, next line, continue on



### Trusted Ports

Ports \<= 1023


Port numbers 1023 and below and trusted ports
They are accessible by root processes only.
Non-root processes must listen on ports greater than 1023.
@
@ Untrusted



# Naming Convention

There is no official convention but the following guidelines are often recommended.
@
@ Names, naming-conventions-only, conventions-only



### Convention - Script Name

<cb><v>script_name<><>

Prefer lower_snake_case.

Don't use an extension (no .sh, no .bash)



### Convention - Script Name (Alternative)

<cb><v>script-name<><>

Use lower-hyphen-case.

Hyphen-case is an alternative to snake_case but pick one and be consistent.
Don't use an extension.



### Convention - Variable Name - OS, Environment Variables

<cb>$<v>VAR_NAME<><>

Use UPPER_SNAKE_CASE.



### Convention - Variable Name - Local, Script

<cb>$<v>user_var_name<><>

Use lower_snake_case.



### Convention - Variable Name - Constant

<cb>$<v>USER_CONSTANT_NAME<><>

Use UPPER_SNAKE_CASE.


<!>Warning:<>
Ensure name does not conflict with OS variable names.



### Convention - Function Name

<cb><v>function_name<>() {
	<v>...<>
}<>


Use lower_snake_case.



# Executing Commands
@
@ execute, jobs, scripts, bash
@ command-only, commands-only, execute-commands-only, command-execution-only, job-only, jobs-only


### Commands - Basics

<card><t>
Start				<|><c><v>command_name<><>
Start in Background<|><c><v>command_name<> &<>
Start from Current Directory<|><c>./<v>command_name<><>
Start in the Current Process<|><c>. <v>command_name<><>

Chain Commands<|><c><v>command1<>; <v>command2<><>
Chain Commands, Pipe Output<|><c><v>command1<> | <v>command2<><>
Chain Commands, Capture Output<|><c><v>command2<> $(<v>command1<>)<>

Run Commands, While Successful<|><c><v>command1<> && <v>command2<><>
Run Commands, While No Error<|><c><v>command1<> || <v>command2<><>

Evaluate, Then Execute<|><c>$(<v>evaluate_command<>)<>

Cancel / End<|><c>CTRL + C<>
End of File<|><c>CTRL + D<>
Suspend<|><c>CTRL + Z<>

Run in Background<|><c>bg % <v>number<><>
Run in Foreground<|><c>fg % <v>number<><>

List All<|><c>jobs<><><>
@
@ summary



### Command - Run In Background

<cb><v>command<> &<>


Append '<c>&<>' to the end of the command to make it run in the background.
@
@ starting, &



### Command - Run In Subshell

<cb>(<v>command<>)<>


Surround command with () to run a script in a subshell.

Any environment changes made by the script will be lost when it returns.
@
@ starting, ()



### Command - Run In Current Shell / Process

<cb>. <v>command<><>

<cb>source <v>command<><>


Runs the command inside the current process.

These two are equivalent.
Any environment changes will be kept.
@
@ starting, .



### Command - Run From Current Directory

<cb>./<v>command<><>


Runs a command in the current directory.

Bash will not run a file in the current directory without the <c>./<> .
This is for security reasons.
@
@ starting, ./



### Command - Run Repeatedly

<cb>repeat <v>count<> <v>command<><>


Runs a command a specific number of times.


Example:

<cb>repeat 5 echo "Play it again Sam."<>
@
@ repeat, count, times



### Command - Evaluate, The Execute

<cb>$(<v>evaluate_command<>)<>


Evaluates the inner command and then executes the output.

Also Called: Command Substitution


Example:

<cb>$(echo "echo hello")

<#># Prints: hello<><>
@
@ $(), command substitution



### Command - Cancel

<cb>CTRL + C<>


Suspends the current process or command.
@
@ end, kill



### Command - Suspend

<cb>CTRL + Z<>


Suspends the current process or command.



### Command, Suspended - Resume In Background

<cb>bg<>

<cb>bg % <v>job_number<><>


Runs the last job or job with given number in the background.
@
@ bg, restart, run



### Command, Suspended - Resume In Foreground

<cb>fg<>

<cb>fg % <v>job_number<><>


Restarts a suspended job.

Runs the last job or job with given number in the foreground.

@
@ fg, restart, run



### Multiple Commands - Run With Command Substitution

<cb><v>command_2<> $(<v>command_1<>)<>


Run command 1 and return the output as arguments for command 2.

<c>$()<> executes the command and returns the output.


Example:

<cb>echo $(echo "Hello") "there."

<#># Prints: Hello there.<><>
@
@ Capture, run, output as argument, command in a command.
@ $(), call, piping, pipe, stdin, stdout



### Multiple Commands - Run Sequentially

<cb><v>command_1<>; <v>command_2<>; <v>...<><>


Runs a sequence of commands from in a single line.

<c>;<> is the command separator.


Example:

<cb>echo "Hello"; echo "There"<>
@
@ ;, together, chain, sequentially



### Multiple Commands - Run Sequentially, Connecting Standard Out to Standard In

<cb><v>command_1<> | <v>command_2<> | <v>...<><>


Runs a sequence of commands, passing the output of one command to the input of the next.

<c>|<> (pipe) redirects the output.


Example:

<cb>ls | grep .log<>
@
@ |, together, piping, pipe, stdin, stdout, chain, sequentially



### Multiple Commands - Run Sequentially, Connecting Standard Out and Error to Standard In

<cb><v>command_1<> |& <v>command_2<> |& <v>...<><>


Runs a sequence of commands, passing the output of one command to the input of the next.

<c>|&<> (pipe) redirects the standard out and error out.


Example:

<cb>ls |& grep .log<>
@
@ |&, together, piping, pipe, stdin, stdout, chain, sequentially



### Multiple Commands - Run Sequentially If Successful

<cb><v>command_1<> && <v>command_2<> && <v>...<><>


Runs each command in sequence if and only if each completes successfully (exit code = 0).


Example:

<cb>echo "Hello" && echo "There"<>
@
@ &&, together, exit code, chain, and



### Multiple Commands - Run Sequentially If Error

<cb><v>command_1<> || <v>command_2<><>

<cb><v>command_1<> || <v>command_2<> || <v>...<><>


Runs the next command only if the previous command returned an error.

A command returns an error when the exit code > 0.


Example:

<cb>echo "Hello" || echo "There"<>
@
@ ||, together, exit code, chain, or, on error



# Redirect Operators
@
@ from, to
@ redirect-only, redirections-only, redirecting-only


## Redirect Operators - Basics

<in 2><table><col>Pipe Output<><col>|<><col><c><v>command_1<> | <v>command_2<><><>
<col> <>
<col>Redirect Input From File<><col>\< <><col><c><v>command<> \< <v>file_name<><><>
<col>Redirect Input From Stream<><col>\<\< <><col><c><v>command<> \<\<<v>LABEL<>
<v>...<>
<v>LABEL<><><>
<col> <>
<col>Redirect to File, New File<><col>><><col><c><v>command<> > <v>file_name<><><>
<col>Redirect to File, Append<><col>>><><col><c><v>command<> >> <v>file_name<><><>
<col> <>
<col>Redirect Standard Out<><col>1><><col><c><v>command<> 2> <v>file_name<><><>
<col>Redirect Error<><col>2><><col><c><v>command<> 2> <v>error_file<><><><><>


File Descriptors:

<in 2><table><col>Standard In<><col>0<>
<col>Standard Out<><col>1<>
<col>Error Out<><col>2<><><>
@
@ summary



## Redirect Operators - Detailed


### Redirect - Pipe Output  |

<cb><v>command_1<> | <v>command_2<><>

<cb><v>command_1<> | <v>command_2<> | <v>command_3<> <v>...<><>


Redirects the output from one command into the standard in of another.


Example:

<cb>ls | grep ".txt"<>
@
@ Redirect input to output
@ standard output, stdout



### Redirect - Redirect Input - \<

<cb><v>command<> < <v>file_name<><>


Sends the contents of the file to the standard input of the command.


Example:

<cb>grep "error" \< output.txt<>
@
@ ;, command separator, terminator, from file
@ standard input, stdin



### Redirect - Redirect Input - \<\< Stream Literals

<cb>command \<\<<v>TERMINATING_LABEL<>
<v>input...<>
<v>input...<>
<v>TERMINATING_LABEL<><>


Sends the lines to the command's standard input.

Input starts on the line after the command and ends before the terminating label.
Note: input is processed very like the contents of double quotes.


Example:

<cb>cat > <v>output.txt<> \<\<<v>END_CONTENT<>
Line 1
Line 2
Line 3
<v>END_CONTENT<>

echo "Results:"
cat <v>output.txt<><>
@
@ multiline, returns, newlines, in script, within, inside
@ standard input, stdin



### Redirect - Redirect Input - \<\<\< From Variable

<cb>command \<\<\< $<v>input_variable<><>


Send the contents of a variable to the standard input of the command.
@
@ \<\<\<



### Redirect - Redirect Output  >

<cb><v>command<> > <v>file_name<><>


Writes the output of the command to the file.

Creates a new file and writes to it.
Deletes any pre-existing file.


Example:

<cb>echo "Save this to a file." > output.txt<>
@
@ >
@ standard Output, stdout



### Redirect - Redirect Output - Append  >>

<cb><v>command<> >> <v>file_name<><>


Writes the output of the command to the file.

Appends to an existing file.
Creates the file if one does not exist.


Example:

<cb>echo "Append this to a file." >> output.txt<>
@
@ >>
@ standard Output, stdout



### Redirect - Redirect Error  2>

<cb><v>command<> 2> <v>error_file<><>


Writes the command's error output to a file.


Example:

<cb>cat non-exsistant-file.txt 2> error.txt<>
@
@ ;, command separator, terminator
@ standard error, stderr



## Redirect To
@
@ standard output, stdout



### Redirect - Redirect Output To New File

<cb><v>command<> > /<v>path<>/<v>file_path<><>


Writes to a file.
@
@ write
@ >



### Redirect - Redirect Output To Existing File

<cb><v>command<> >> /<v>path<>/<v>file_path<><>


Appends to an existing file or creates one if it does not exist.
@
@ append, write
@ >>



### Redirect - Redirect Output To Device

<cb><v>command<> > /dev/<v>device_name<><>


Writes to a device.
@
@ > /dev



### Redirect - Redirect Output To Null

<cb><v>command<> > /dev/null<>


Writes to <c>null<> which effectively writes to nothing.


Example:

<cb>echo "Save this to the ether!" > /dev/null<>
@
@ > /dev/null, null, nothing



# Operators
@
@ Operators, Operations, Expressions, ops
@ operators-only, ops-only



## Arithmetic Operators

Evaluate:

<in 2><c><v>result<>=$((<v>a<> + <v>b<>))<><>

Operators:

<in 2><table><col><v>a<>++<>
<col>++<v>a<><>
<col><v>a<>--<>
<col>--<v>a<><>
<col> <>
<col><c><v>a<> + <v>b<>		<><>
<col><c><v>a<> - <v>b<><><>
<col><c><v>a<> * <v>b<><><>
<col><c><v>a<> / <v>b<><><><col>Always Returns a Float<>
<col> <>
<col><c><v>a<> % <v>b<><><><col>Modulo ( 7 % 3 = 1)<>
<col><c><v>a<> ** <v>b<><><><col>To The Power of<><><>

Note:

<in 2>All values must be integers or integer variables.
Always returns an integer value.<>
@
@ %, **, +, -, /, //, (()), $(())
@ modulo, modulus, plus, minus, divide, multiply, power of
@ mathematics, maths, numbers, ints, integers
@ int-only, integer-only, integers-only



## Number Comparison Operators

Evaluate:

<in 2><c><v>result<>=$((<v>a<> < <v>b<>))<><>

Operators:

<in 2><table><col><c><v>a<> -eq <v>b<><><><col>Is Equal<>
<col><c><v>a<> -ne <v>b<><><><col>Not Equal<>
<col><c><v>a<> -lt <v>b<><><><col>Less Than<>
<col><c><v>a<> -le <v>b<><><><col>Less Than or Equal<>
<col><c><v>a<> -gt <v>b<><><><col>Greater Than<>
<col><c><v>a<> -ge <v>b<><><><col>Greater Than or Equal<><><>

<in 2><table><col><c><v>a<> = <v>b<>	<><><col>Is Equal / Prefer over ==<>
<col><c><v>a<> == <v>b<>	<><><col>Is Equal / Supports Pattern Matching<>
<col><c><v>a<> != <v>b<><><>
<col><c><v>a<> > <v>b<><><>
<col><c><v>a<> \< <v>b<><><>
<col><c><v>a<> >= <v>b<><><>
<col><c><v>a<> \<= <v>b<><><><><>

Values:

<in 2><table><col><c>0	<><><col>False<>
<col><c>1	<><><col>True<><><>

Notes:

Compares integer values only.
All values must be integers or integer variables.
Will always return either 0 (false) or 1 (true).

<table><col><c>(())<><><col>Use <c>==, !=, >, \<, >=, \<=<><>
<col><c>[]<><><col>Use <c>-eq, -ne, -lt, -le, -gt, -ge<><>
<col><c>[[]]<><><col>Use Either Form<><>

Prefer <c>((<v>expression<>))<>
@
@ ==, !=, >, >=, \<, \<=, (()), $(())
@ less than, greater than, less that or equal, greater than or equal, integer, equals
@ compare, camparator, numbers, ints, integers
@ int-only, integer-only, integers-only
@ -eq, -ne, -lt, -le, -gt, -ge



## String Operators

<in 2><table><col><c><v>a<> == <v>b<><>		<><col>Equals<>
<col><c><v>a<> != <v>b<><><><col>Not Equal<>
<col> <>
<col><c>-z <v>a<><><><col>Unset or Length 0<super><#>1<><><>
<col><c>-n <v>a<><><><col>Length > 0<><><>


1 - Unset or Length = 0 are the same.
@
@ text
@ -n, -z, !, ==, !=



## String Comparison Operators

Evaluate:

<in 2><c>if [[ $<v>a<> >= $<v>b<> ]] <v>...<>

if [ "$<v>a<>" >= "$<v>b<>" ] <v>...<><><>

Operators:

<in 2><table><col><c><v>a<> = <v>b<><>	<><col>Prefer Over ==<>
<col><c><v>a<> == <v>b<>	<><>
<col><c><v>a<> != <v>b<><><>
<col><c><v>a<> > <v>b<><><>
<col><c><v>a<> \< <v>b<><><>
<col><c><v>a<> >= <v>b<><><>
<col><c><v>a<> \<= <v>b<><><><><>
@
@ Boolean, ==, !=, \<>, \<, \<=, >, >/, is, not
@ less than, greater than, less that or equal, greater than or equal, text
@ compare, camparator, strings, [], [[]]



## String Operators -n vs ! -z

Generally -n is equivalent to ! -z:

<cb>[[ -n $<v>value<> ]]  same as  [[ ! -z $<v>value<>]]<>

But...

<c>[ -n ]<> behaves differently than <c>[[ -n ]]<> (single square brackets).
<c>[ -n ]<> will return true for empty variable.

<cb>[ -n $<v>value<> ]  is DIFFERENT to  [ ! -z $<v>value<>]<>


Prefer <c>! -z<> if using <c>[]<> (single square brackets).


## Logical Operators

Operators:

<in 2><table><col><c>! <v>b<><>								<><col>Not<>
<col><c><v>a<> && <v>b<><><><col>And<>
<col><c><v>a<> || <v>b<><><><col>Or<><><>

Between Expressions:

<in 2><table><col><c>! [ <v>condition<> ]	<><><col>Not<>
<col> <>
<col><c>[ <v>condition_a<> ] && [ <v>condition_b<> ]<><><col>And<>
<col><c>[ <v>condition_a<> ] || [ <v>condition_b<> ]<><><col>Or<><><>
@
@ Boolean, and, or, not, &&, ||, !



# Control Structures
@
@ statements, flow
@ control-only, control-structure-only, control-structures-only
@ control-statements-only


## Control Structures - Basics


<table><col>if		<><col><c>if [[ <v>expression<> ]]
then
	<v>...<>
elif [[ <v>expression<> ]]
then
	<v>...<>
else
	<v>...<>
fi<><>
<col> <>
<col> <>
<col><><col><c>if [[ <v>expression<> ]]; then
	<v>...<>
elif [ <v>expression<> ]; then
	<v>...<>
else
	<v>...<>
fi<><>
<col> <>
<col> <>
<col>Case<><col><c>case "$<v>string_1<>" in

	<v>value_1<>)
		<v>...<>
		;;

	<v>value_2<> | <v>value_3<> | <v>value_4<>)
		<v>...<>
		;;

	*)
		<#># Default:<>
		<v>...<>
		;;
esac<><>
<col> <>
<col> <>
<col>For<><col><c>for ((<v>value<>=0; <v>value<> \< <v>count<>; <v>value<>++))
do
	<v>...<>
	<v>...<> <v><>$<v>value<>
	<v>...<>
	continue
	<v>...<>
	break
	<v>...<>
done<><>
<col> <>
<col> <>
<col> <><col><c>for ((<v>value<>=0; <v>value<> \< <v>max<>; <v>value<>++))<><>
<col> <>
<col><><col><c>for <v>value<> in {<v>first<>..<v>last<>}<><>
<col> <>
<col><><col><c>for <v>value<> in "${<v>array_1<>[@]}"<><>
<col> <>
<col><><col><c>for <v>value<> in "<v>value 1<>" "<v>value 2<>" "<v>value 3<>"<><>
<col> <>
<col> <>
<col>Until<><col><c>until [ <v>expression<> ]
do
	<v>...<>
	continue
	<v>...<>
	break
	<v>...<>
done<><>
<col> <>
<col> <>
<col>While<><col><c>while [ <v>expression<> ]
do
	<v>...<>
	continue
	<v>...<>
	break
	<v>...<>
done<><><>
@
@ summary



## If Else
@
@ if, elif, else, fi, conditionals
@ if-only, if-else-only, if-elif-only


### If Else

<cb>if [[ <v>expression<> ]]; then
	<v>...<>
fi<>

<cb>if [[ <v>expression<> ]]; then
	<v>...<>
elif [[ <v>expression<> ]]; then
	<v>...<>
else
	<v>...<>
fi<>


Separate <c>if<> and <c>elif<> from <c>then<> with a command separator (<c>;<>).


### If Else - Expanded Form

<cb>if [[ <v>expression<> ]]
then
	<v>...<>
fi<>

<cb>if [[ <v>expression<> ]]
then
	<v>...<>
elif [[ <v>expression<> ]]
then
	<v>...<>
else
	<v>...<>
fi<>



### If Else - Conditions

<cb>if test <v>expression<> <v>...<><>

<cb>if [<v>expression<>] <v>...<><>

<cb>if [[<v>expression<>]] <v>...<><>

<cb>if [[<v>expression<>]] && [[<v>expression<> ]] <v>...<><>

<cb>if ((<v>expression<>)) <v>...<><>


<c>(( ))<> - Arithmetic operations can be used but you should prefer [[ ]].
<c>(( ))<> - Non 0 values are True



### If Else - One Liner

<cb>if [[ <v>expression<> ]] ; then <v>true_command<> ; else <v>false_command<> ; fi<>


A single line if else.


Example:

<cb>if [[ <v>$1<> == <v>"a"<> ]] ; then echo "true" ; else echo "false" ; fi<>
@
@ 1, single



## Case
@
@ case in, esac, ;;
@ case-only, case-in-only


### Case - Basics

<cb>case "$<v>string_1<>" in

	<v>value_1<>)
		<v>...<>
		;;

	<v>value_2<>)
		<v>...<>
		;;

	<v>value_3<> | <v>value_4<> | <v>value_5<>)
		<v>...<>
		;;

	*)
		<#># Default:<>
		<v>...<>
		;;
esac<>
@
@ |, *)



### Case

<cb>case "$<v>string_1<>" in

	<v>value_1<>)
		<v>...<>
		;;

	<v>value_2<>)
		<v>...<>
		;;<>


Executes one of the following clauses depending on the value in the <c>case in<> statement.


Case is case sensitive.

;; is required to terminate each case clause.


Example:

<cb><v>command<>="start"

case "$<v>command<>":

	"<v>start<>")

		echo "Starting"
		;;

	"<v>stop<>")

		echo "Stopping"
		;;
esac<>



### Case - Default

<cb>case "$<v>string_1<>" in

	<v>value_1<>)
		<v>...<>
		;;

	<v>value_2<>)
		<v>...<>
		;;

	*)
		<#># Default:<>
		<v>...<>
		;;<>


Executes the default clause (after '<c>*)<>') when no matching value is found.


Example:

<cb><v>command<>="start"

case "$<v>command<>":

	"<v>start<>")

		echo "Starting"
		;;

	"<v>stop<>")

		echo "Stopping"
		;;

	*)
		echo "Unknown command: '$<v>command<>'"
		;;
esac<>
@
@ *)



### Case - Fall Throughs

Case statements do not support fall throughs.



### Case - Multiple Value Clause

<cb>case "$<v>string_1<>" in

	<v>value_1<> | <v>value_2<>)
		<v>...<>
		;;

	<v>value_3<> | <v>value_4<> | <v>value_5<>)

		<v>...<>
		;;<>


You can match multiple values in a single line.
Separate values with a pipe ('|').


Example:

<cb><v>command<>="begin"

case "$<v>command<>":

	"<v>start<>" | "<v>begin<>")

		echo "Starting"
		;;

	"<v>stop<>" | "<v>end<>")

		echo "Stopping"
		;;
esac<>
@
@ case in, ;;, |
@ case-only, case-in-only



## For
@
@ for loop, do, done
@ for-only, for-loop-only, for-do-only


### For - Basics

<cb>for <v>item<> in {<v>first<>..<v>last<>}; do
	<v>...<>
done<>

<cb>for <v>value<> in {<v>first<>..<v>last<>}
do
	<v>...<>
	<v>...<> $<v>value<>
done<>

<cb>for ((<v>value<>=0; <v>value<> \<= <v>max<>; <v>value<>++)) ; do
	<v>...<>
	<v>...<> <v><>$<v>value<>
done<>

<cb>for <v>item<> in "${<v>array_1<>[@]}" ; do
	<v>...<>
done<>

<cb>for <v>item<> in "<v>value 1<>" "<v>value 2<>" "<v>value 3<>" <v>...<> ; do
	<v>...<>
done<>

<cb>for <v>item<> in {<v>first<>..<v>last<>} ; do
	<v>...<>
	continue
	<v>...<>
	break
	<v>...<>
done<>



### For

<cb>for ((<v>value<>=<v>starting_value<>; <v>continue_while<>; <v>next_value<>))<>

Usage:

<cb>for ((<v>value<>=<v>starting_value<>; <v>continue_while<>; <v>next_value<>)); do
	<v>...<>
	<v>...<> $<v>value<>	<#>#1<>
done<>


Iterates through a series of values.


\#1  <s>-<>  Reference the current value with <c>$<v>value<><>.


Example:

<cb><v>count<>=<v>3<>

for ((<v>value<>=0; <v>value<> \< <v>count<>; <v>value<>++)); do
	echo "Value $<v>value<>"
done<>



### For - In Range

<cb>for <v>value<> in {<v>first<>..<v>last<>}<>

<cb>for <v>value<> in {<v>first<>..<v>last<>..<v>increment<>}<>

Usage:

<cb>for <v>value<> in {<v>first<>..<v>last<>..<v>increment<>}; do
	<v>...<>
	<v>...<> $<v>value<>	<#>#1<>
done<>


Iterates over a range of numbers.

Numbers range in value from first to last inclusively.
{..} does NOT support variable parameters. Values must be explicit numbers.


\#1  <s>-<>  Reference the current value with <c>$<v>value<><>.


Print 1 to 5:

<cb>for <v>value<> in {1..5}; do
	echo "$<v>value<>"
done<>


Print 1, 3, 5:

<cb>for <v>value<> in {1..5..2}; do
	echo "$<v>value<>"
done<>



### For - In Range - Using Variables

<cb>for <v>value<> in $(seq $<v>count<>)<>

<cb>for <v>value<> in $(seq $<v>first<> $<v>last<>)<>

Usage:

<cb>for <v>value<> in $(seq $<v>count<>); do
	<v>...<>
done<>


Iterates over a range of numbers.

Use when your number range uses variables for values.


Print 3, 4, 5:

<cb><v>first<>=3
<v>last<>=5

for <v>value<> in $(seq $<v>first<> $<v>last<>); do
	echo "$<v>value<>"
done<>
@
@ range, sequence



### For - In Array

<cb>for <v>value<> in "${<v>array_1<>[@]}"<>

Usage:

<cb>for <v>item<> in "${<v>array_1<>[@]}"; do
	<v>...<>
	<v>...<> <v><>$<v>item<>
done<>


Loop through all items in the array.


Example:

<cb><v>array_1<>=("<v>value 1<>" "<v>value 2<>" "<v>value 3<>")

for <v>value<> in "${<v>array_1<>[@]}"; do
	echo "$<v>value<>"
done<>
@
@ list, items, foreach, for-each



### For - In Item List

<cb>for <v>value<> in <v>value_1<> <v>value_2<> <v>value_3<><>

Usage:

<cb>for <v>item<> in <v>value_1<> <v>value_2<> <v>value_3<>; do
	<v>...<>
	<v>...<> <v><>$<v>item<>
done<>


Loop through all the items listed after <c>in<>


Examples:

<cb>for <v>value<> in "<v>value 1<>" "<v>value 2<>" "<v>value 3<>"; do
	echo "$<v>value<>"
done<>
@
@ list, items, foreach, for-each



### For - Break, Continue

<cb>for <v>...<>; do
	<v>...<>
	continue
	<v>...<>
	break
	<v>...<>
done<>


For supports break and continue.

break - exit the for loop.
continue - skip to the next iteration.



## Until
@
@ do, done, until-only, until-do-only


### Until - Basics

<cb>until [ <v>expression<> ]; do
	<v>...<>
done<>

<cb>until [ <v>expression<> ]
do
	<v>...<>
done<>

<cb>until [ <v>expression<> ]
do
	<v>...<>
	continue
	<v>...<>
	break
	<v>...<>
done<>
@
@ continue, break



### Until

<cb>until [ <v>expression<> ] ; do
	<v>...<>
done<>

<cb>until [ <v>expression<> ]
do
	<v>...<>
done<>


Executes until an expression is true.


Example:

<cb><v>count<>=0
<v>max<>=3

until [ $<v>count<> -eq $<v>max<> ]
do
	echo "$<v>count<>"
	<v>count<>=$[ $<v>count<> + 1 ]
done<>



### Until - Break, Continue

<cb>until [ <v>expression<> ]
do
	<v>...<>
	continue
	<v>...<>
	break
	<v>...<>
done<>


Until supports break and continue.

break - exit the for loop.
continue - skip to the next iteration.



### Until - Condensed

<cb>until [ <v>expression<> ]; do
	<v>...<>
done<>


Example:

<cb><v>count<>=0
<v>max<>=3

until [ $<v>count<> -eq $<v>max<> ]; do
	echo "$<v>count<>"
	<v>count<>=$[ $<v>count<> + 1 ]
done<>



## While
@
@ do, done, while-only, while-do-only


### While - Basics

<cb>while [ <v>expression<> ]; do
	<v>...<>
done<>

<cb>while [ <v>expression<> ]
do
	<v>...<>
done<>

<cb>while [ <v>expression<> ]
do
	<v>...<>
	continue
	<v>...<>
	break
	<v>...<>
done<>
@
@ continue, break



### While

<cb>while [ <v>expression<> ] ; do
	<v>...<>
done<>

<cb>while [ <v>expression<> ]
do
	<v>...<>
done<>


Executes while an expression is true.


Example:

<cb><v>count<>=0
<v>max<>=3

while [ $<v>count<> -lt $<v>max<> ]
do
	echo "$<v>count<>"
	<v>count<>=$[ $<v>count<> + 1 ]
done<>



### While - Break, Continue

<cb>while [ <v>expression<> ]
do
	<v>...<>
	continue
	<v>...<>
	break
	<v>...<>
done<>


While supports break and continue.

break - exit the for loop.
continue - skip to the next iteration.



### While - Condensed

<cb>while [ <v>expression<> ]; do
	<v>...<>
done<>


Example:

<cb><v>count<>=0
<v>max<>=3

while [ $<v>count<> -lt $<v>max<> ]; do
	echo "$<v>count<>"
	<v>count<>=$[ $<v>count<> + 1 ]
done<>



# Literals
@
@ literals-only, lit-only, literal-only


## Literals - Basics

<t>Integer<|><c><v>123<><>
<|><c>-<v>123<><>
<|><c><v>123_456<><>

Binary<|><c>2#<v>1100<><>
<|><c>2#-<v>1100<><>
<|><c>2#<v>1111_0000<><>

Hex<|><c>0x<v>1100<><>
<|><c>0x-<v>1100<><>
<|><c>0x<v>1111_0000<><>

Octal<|><c>=8#<v>7777<><>
<|><c>=8#-<v>7777<><>
<|><c>=8#<v>777_000<><>

Base N<|><c><v>n<>#<v>1234<><>
<|><c><v>n<>#-<v>1234<><>
<|><c><v>n<>#<v>123_456<><>

String<|><c><v>a_string<><>
<|><c>'<v>a string<>'<>
<|><c>"<v>a string<>"<>

String Escape<|><c>\\c<v>x<><>

Hex Char<|><c>\\x<v>FF<><>
Octal Char<|><c>\\0<v>777<><>
Unicode Char<|><c>\\u<v>FFFF<><><|>1-4 Digits Only
Unicode Char<|><c>\\U<v>FFFFFFFF<><><|>1-8 Digits Only<><>
@
@ summary

## Literals - Details


### Integer Literal

<cb>=<v>123<><>

<cb>=-<v>123<><>

<cb>=<v>123_456<><>


Integers are just strings. They are only evaluated as integers when in an arithmetic expression.



### Integer Literal - Base N

<cb>=<v>n<>#<v>1234<><>

<cb>=<v>n<>#-<v>1234<><>

<cb>=<v>n<>#<v>123_456<><>


Defines a number of any arbitrary base n.


Example:

<cb><v>a<>=$((<v>2<>#<v>1100<>))
echo $<v>a<>

<#># Prints: 12<><>
@
@ 2#



### Integer Literal - Binary

<cb>=2#<v>1100<><>

<cb>=2#-<v>1100<><>

<cb>=2#<v>1111_0000<><>


Example:

<cb><v>a<>=$((2#<v>1100<>))
echo $<v>a<>

<#># Prints: 12<><>
@
@ 2#



### Integer Literal - Hex

<cb>=0x<v>1100<><>

<cb>=0x-<v>1100<><>

<cb>=0x<v>1111_0000<><>


Example:

<cb><v>a<>=$((0x<v>FF<>))
echo $<v>a<>

<#># Prints: 255<><>
@
@ hexadecimal
@ 0x



### Integer Literal - Octal

<cb>=8#<v>7777<><>

<cb>=8#-<v>7777<><>

<cb>=8#<v>777_000<><>


Example:

<cb><v>a<>=$((8#<v>77<>))
echo $<v>a<>

<#># Prints: 63<><>
@
@ 8#



### String Literals

<cb><v>string<><>

<cb>'<v>a string<>'<>

<cb>"<v>a string<>"<>



### String Literals - Escape Characters

<cb>\\<v>x<><>

<table><col>Alert / Bell<><col><c>\\a<><>
<col>Backspace<><col><c>\\b<><>
<col>Carriage Return<><col><c>\\r<><>
<col>Escape Character<><col><c>\\e<><>
<col><><col><c>\\E<><>
<col>Form Feed<><col><c>\\f<><>
<col>Newline<><col><c>\\n<><>
<col>Tab<><col><c>\\t<><>
<col>Tab, Vertical<><col><c>\\v<><>
<col> <>
<col>Backslash<><col><c>\\\\<><>
<col>Exclamation Mark<><col><c>\\!<><>
<col>Question Mark<><col><c>\\?<><>
<col>Quote, Double<><col><c>\\"<><>
<col>Quote, Single<><col><c>\\'<><><>
@
@ escapes, escaping
@ \\a, \\b, \\r, \\e, \\E, \\f, \\n, \\t, \\v
@ \\\\, \\!, \\?, \\", \\'



### String Literal - Hex Character

<cb>\\x<v>FF<><>


Defines an 8 bit character in hex.


Example:

<cb>echo "a = \\x61"<>
@
@ escapes, escaping
@ \\x



### String Literal - Octal Character

<cb>\\0<v>777<><>


Defines an 8 bit character in octal.


Example:

<cb>echo "a = \\0141"<>
@
@ escapes, escaping
@ \\0



### String Literal - Unicode Character

<cb>\\u<v>FFFF<><>

<cb>\\U<v>FFFFFFFF<><>


Defines an 8 bit character in hex.


\\u		1-4 digits only
\\U		1-8 digits


Example:

<cb>echo "🍌 = \\U1F34C"<>
@
@ escapes, escaping
@ \\u



# Expression Evaluation
@
@ expression-only, expressions-only


### Evaluate - Arithmetic Expression

<cb>((<v>expression<>))<>

<cb>=$((<v>expression<>))<>


Evaluates an integer expression and returns the integer result.

Updates exit code.

	1  - If the expression returns a 0.
	0  - If the expression returns a non-zero value.


Example:

<cb><v>a<>=10
<v>b<>=$(($<v>a<> + 1))

echo "$<v>b<>"

<#># Prints: 11<><>
@
@ integers, ints, maths, equation, numbers
@ assign, set, save



### Evaluate - Arithmetic Expression - Exit Code

<cb>((<v>expression<>))<>

<cb>if ((<v>expression<>)); <v>...<><>


When (( )) evaluates an integer expression, it sets the exit code.

If the result is 0, returns false (1)
If the result is non-zero, returns true (0)

Exit Code:

1  - If the expression returns a 0 value.
0  - If the expression returns a non-zero value.



### Evaluate - Logical Expression

<cb>[[ <v>expression<> ]]<>

<cb>[ <v>expression<> ]<>

<cb>test <v>expression<><>


Evaluates true or false.

The result is saved to the exit code.
Use in conditional statements (if, until, while).

<c>test<> and <c>[ ]<> are equivalent.
[[ ]] is the improved version of [ ]. 


Example:

<cb>if [[ 1 > 0 ]]; then
	echo "1 is greater."
fi

<#># Prints: 1 is greater.<><>

<cb>if [ 1 -ge 0 ]; then
	echo "1 is greater."
fi

<#># Prints: 1 is greater.<><>
@
@ test, [[]], []
@ assign, set, save



### [] vs [[]] vs () vs (())

<c><v>command<><>

<*>Execute a Command
Runs in Current Subshell
Exit Code is Set on Return<>

<c>(<v>command<>)<>

<*>Execute a Command
Runs in a Subshell
Exit Code is Set on Return<>

<c>(( <v>arithmetic<> ))<>

<*>Arithmetic Expression
Evaluates to an Integer
Sets the Exit Code
Expression Variables Do Not Require Quotes ""<>

<c>test <v>condition<><>

<*>Logical Expression
Sets the Exit Code
Sets True (1) or False (0)
Expression Variables Should Be In Quotes ""<>

<c>[ <v>condition<> ]<>

<*>Logical Expression
sh Compatible
Sets the Exit Code
Sets True (1) or False (0)
Expression Variables Should Be In Quotes ""<>

<c>[[ <v>condition<> ]]<>

<*>Logical Expression
Newer Form of <c>[ ]<> (Prefer <c>[[ ]]<>)
Not sh Compatible
Sets the Exit Code
Sets True (1) or False (0)
Expression Variables Do Not Require Quotes ""<>



### [] vs [[]] vs () vs (()) By Usage

<c><v>command<><> :

<in 2><cb><v>command<>

if <v>command<>; <v>...<><><>

<c>(<v>command<>)<> :

<in 2><cb>(<v>command<>)

if (<v>command<>); <v>...<>

<v>output<>="$(<v>command<>)"<><>

<c>(( <v>arithmetic<> ))<> :

<in 2><cb><v>result<>=$(( <v>arithmetic<> ))

if (( <v>arithmetic<> )); <v>...<><><>

<c>test <v>condition<><> :

<in 2><cb>test <v>conditional<>

test <v>conditional<> && <v>command<>

if test <v>conditional<>; <v>...<><><>

<c>[ <v>condition<> ]<> :

<in 2><cb>[ <v>conditional<> ] && <v>command<>

if [ <v>conditional<> ]; <v>...<><><>

<c>[[ <v>condition<> ]]<> :

<in 2><cb>[[ <v>conditional<> ]] && <v>command<>

if [[ <v>conditional<> ]]; <v>...<><><>



# Variables
@
@ Environment
@ vars-only, variable-only, variables-only


## Variable - Basics

<table><col>Create / Update<><col><c><v>variable_name<>=<v>value<><><>
<col>Delete<><col><c>unset <v>variable_name<><><>
<col> <>
<col>Get / Use Value<><col><c>$<v>variable_name<><><>
<col><><col><c>${<v>variable_name<>}<><>
<col> <>
<col>Pass Containing Spaces<><col><c>"$<v>variable_name<>"<><>
<col><><col><c>"${<v>variable_name<>}"<><><>
@
@ summary



## Variable - Details


### Variable - Create - Global / Environment

<cb><v>variable_1<>=<v>value<><>

<cb><v>variable_1<>="<v>value<>"<>


Creates a variable.

The variable will be global.
There must be NO spaces around <c>=<>.


Examples:

<cb><v>int_1<>=<v>10<><>

<cb><v>string_1<>="<v>Some Text<>"<>
@
@ new, set, instantiate, define, assign, =



### Variable - Create - Local

<cb>local <v>variable_1<>=<v>value<><>

<cb>local <v>variable_1<>="<v>value<>"<>


Creates a local variable.

The variable's scope is local to the function or place it is created.
There must be NO spaces around <c>=<>.


Examples:

<cb>local <v>int_1<>=<v>10<><>

<cb>local <v>string_1<>="<v>Some Text<>"<>
@
@ new, create, instantiate, define, assign, =



### Variable - Create - From Command Output

<cb><v>variable<>="$(<v>command<>)"<>

Saves the standard output from a command in the variable.
@
@ to, capture
@ "$()", $()



### Variable - Delete

<cb>unset <v>variable_1<><>
@
@ unset, remove



### Variable - Get

<cb>=$<v>variable_1<><>

If Contains Spaces:

<cb>="$<v>variable_1<>"<>

If Embedded in Text:

<cb>="${<v>variable_1<>}"<>


Returns the value of a variable.


Example:

<cb><v>text<>="Print this text."

echo "$<v>text<>"<>
@
@ read value, access
@ $, ${}



### Variable - Is Set

<cb>! -z "$<v>variable_1<>"<>

Usage:

<cb>if [[ ! -z "$<v>variable_1<>" ]]; then
	<v>...<>
fi<>


Returns true if the variable has a value.

False for empty strings.
False for non set variables.

Bash treats unset variables and length 0 values as the same.
@
@ null, -n, not present, no value, has value, exists



### Variable - Is Empty or Unset?

<cb>-z "$<v>variable_1<>"<>

Usage:

<cb>if [[ -z "$<v>variable_1<>" ]]; then
	<v>...<>
fi<>


Returns true if the variable is an empty string or is unset.

Unset and Length 0 are the same.
@
@ null, not present, not set, no value, is missing
@ -z



### Variable - Update

<cb><v>variable_1<>=<v>value<><>

<cb><v>variable_1<>="<v>value<>"<>


Updates the variable value.

Same syntax as create.
There must be NO spaces around <c>=<>.


Examples:

<cb><v>int_1<>=<v>10<><>

<cb><v>string_1<>="<v>Some Text<>"<>
@
@ modify, change
@ =



### Variables - View All

<cb>set<>

or

<cb>printenv<>


Displays all environment variables.


set:

<*>Shows Environment Variables
Shows Shell Variables<>

printenv:

<*>Shows Environment Variables Only<>
@
@ show, display
@ set, printenv



### Variables - View All - Sorted

<cb>set | sort<>

or

<cb>printenv | sort<>


Displays a sorted list of environment variables.
@
@ show, display, alphabetically
@ set, printenv



# Parameters
@
@ arguments, params, variables
@ params-only, parameter-only, parameters-only
@ args-only, argument-only, arguments-only


### Parameter - Command / Script Name

<cb>$0<>

Returns the name of the command or script that was called.

Includes the path used to call the command (if any).
@
@ $0



### Parameters - Individual

<cb>$1 $2 $3 ...<>

References the parameters passed into the script
@
@ $1, $2, $3, $4, $5, $6, $7, $8, $9



### Parameters - All Parameters

<cb>$*<>

References all parameters.

Prefer: <c>$@<>

Use this to pass the parameters to a function or another script.

This will NOT pass values with spaces correctly.
The space will be read as a parameter separator.
Use <c>$@<> to correctly pass parameters with spaces.
@
@ $*



### Parameters - All Parameters, Quoted

<cb>$@<>

References all parameters. Individual parameters are wrapped in quotes.

Use this to pass the parameters to a function or another script.
This will pass values with spaces correctly as the individual parameters are quoted.
@
@ $@



### Parameters - All Parameters, With Spaces, Quoted

<cb>"$@"<>

References all parameters. Individual parameters are wrapped in quotes.
@
@ "$@", $@



### Parameters - All Parameters Except 1st

<cb>${*:2}<>

References / passes all parameters starting with the second parameter.

Prefer: <c>${@:2}<>
@
@ ${*:2}
@ with 2nd, first, second, to end, remainder, remaining, onward, but



### Parameters - All Parameters Except 1st, Quoted

<cb>${@:2}<>

References / passes all parameters starting with the second parameter.

Parameters are wrapped in quotes and will pass spaces correctly.
@
@ ${@:2}
@ with 2nd, first, second, to end, remainder, remaining, onward, but



### Parameters - Parameter Count

<cb>$#<>

Return or Exit Code from last operation.

Excludes parameter $0
@
@ size, length, number
@ $#



### Parameters - To String

<cb>="$*"<>

Usage:

<cb><v>parameters<>="$*"<>


Converts the parameters into a string.

Each parameter is separated by a space.
@
@ from, convert, conversion, converting
@ param-to, parameter-to, parameters-to, to-string, 



### Parameters - Shift Parameters

<cb>shift<>

<cb>shift <v>count<><>

Shifts parameters one position to the left, or by <v>count<> positions if given.

Moves: $2 -> $1, $3 -> $2, etc.
@
@ remainder, remove, move



### Parameters - Return Code

<cb>$?<>

Return or Exit Code from last operation.
@
@ value, integer, exit, variable, result
@ $?



### Parameters - Parameter Count

<cb>$#<>

Returns the number of parameters passed to the script.
@
@ $



# Data Types

Boolean			0 (True) | 1 (False)
Integer
String


Note:

Everything is treated as a string.
Arithmetic operators will convert number strings into number values internally during operations.
Booleans are typically returned as exit codes.



# Booleans

Booleans do not exist in Bash.

Instead:

Use commands <c>true<> and <c>false<> to set the exit code, then check that.

<cb>true
false<>

True is also generally the exit code 0.
False is any non 0 exit code.
@
@ booleans, true, false
@ bool-only, bools-only, boolean-only, booleans-only


### Boolean - Create

<cb>true<>

<cb>false<>


Set the boolean value in the exit code.

Use <c>true<> and <c>false<> to set the exit code.

Generally:

	true = 0
	false = 1 or any non-zero value.



## Boolean Operations
@
@ booleans, true, false
@ bool-only, boolean-only, booleans-only


### Boolean - Is False?

<cb>if ! <v>function<>; then<v>...<><>

<cb>If [[ $? -ne 0 ]]; then <v>...<><>

<cb>if ! (exit $<v>value<>); then <v>...<><>


Tests if the exit code is false (!= 0).
@
@ !



### Boolean - Is True?

<cb>if <v>function<>; then<v>...<><>

<cb>if [[ $? -eq 0 ]]; then <v>...<><>

<cb>if (exit $<v>value<>); then<v>...<><>


Tests if the exit code is true (= 0).



### Boolean - Set True

<cb>true<>


Sets the exit code to 0.


Example:

<cb>true

echo "$?"<>
@
@ command, exit code to
@ true



### Boolean - Set False

<cb>false<>


Sets the exit code to 1.


Example:

<cb>false

echo "$?"<>
@
@ command, exit code to
@ false



# Integers

<cb>=<v>42<>
='<v>42<>'<>

Usage:

<cb><v>int_1<>=<v>42<>
<v>int_1<>='<v>42<>'<>


Integers are stored as string values.
@
@ int, int-only, integer-only, ints-only, integers-only
@ number, numbers, nums



# Integer Operations
@
@ integers
@ int, int-only, integer-only, ints-only, integers-only
@ number, numbers, nums



### Integer - Evaluate Expression

<cb>(( <v>expression<> ))<>

Usage:

<cb><v>result<>=$(( <v>expression<> ))<>


Evaluates an integer expression.


Example:

<cb><v>a<>=40
<v>b<>=2

<v>result<>=$(( $<v>a<> + $<v>b<> ))

echo "$<v>result<>"

<#>Prints: 42<><>
@
@ calculate, $(()), (())



### Integer - Add

<cb>$<v>value_1<> + $<v>value_2<><>

Usage:

<cb><v>result<>=$(( $<v>value_1<> + $<v>value_2<> ))<>


Adds 2 values together.
@
@ calculate, $(()), (())



### Integer - Subtract

<cb>$<v>value_1<> - $<v>value_2<><>

Usage:

<cb><v>result<>=$(( $<v>value_1<> - $<v>value_2<> ))<>


Subtracts one value from another.
@
@ calculate, $(()), (())



# Strings
@
@ text-only
@ string-only, strings-only, str-only, "", ''


### String

Literal String:

<cb>'<v>A String<>'<>

Expanded String:

<cb>"<v>A String<>"<>

Expanded String With Variable

<cb>"String with expanded $<v>variables<>"<>


Literal Strings:
Assign as is with no interpolation.

Expanded Strings:
Assigns after evaluatinng internal values and expressions.


Examples:

<cb><v>text_1<>='<v>This is some text.<>'<>

<cb><v>text_1<>="<v>This is some text.<>"<>

<cb><v>your_home_directory<>="<v>Your home directory is $HOME.<>"<>



### String - Multiline String

<cb>"<v>Multiline
String<>"<>

Usage:

<cb><v>MULTILINE_STRING<>="<v>A multiline
string.<>"<>


Defines a multiline string.

A string can cross multiple lines as long as it is enclosed in quotes.



### String - Escape Single Quote

<cb>'<v>Escape this<> '"'"' <v>quote<>'<>


Escapes a single quote inside a string.

Effectively, this is 3 strings in one.



### String - Escape Space

<cb>\\ <>

'<c>\\ <>' - allows spaces to be placed in places without quotes.


Escapes a space in a string.

Use this for passing strings without having to add quotes.
@
@ \\



# String - Properties
@
@ props-only, string-properties-only, properties-only
@ string-only, strings-only, str-only, text-only



### String - First Lines

<cb>head<>

Usage:

<cb><v>command<> | head<>


Returns the first 10 lines of a string.
@
@ first, start of, top, contents
@ head



### String - First N Lines

<cb>head -n <v>count<><>

Usage:

<cb><v>command<> | head -n <v>count<><>


Returns the first <c><v>count<><> lines of a string.
@
@ first, start of, top, contents
@ head, -n



### String - Last Lines

<cb>tail<>

Usage:

<cb><v>command<> | tail<>


Returns the last 10 lines of a string.
@
@ last, end of, bottom, contents
@ tail



### String - Last N Lines

<cb>tail -n <v>count<><>

Usage:

<cb><v>command<> | tail -n <v>count<><>


Returns the last <c><v>count<><> lines of a string.
@
@ last, end of, bottom, contents
@ tail, -n



### String - Length

<cb>${#<v>string_1<>}<>


Returns the length of a string.


Example:

<cb><v>string_1<>="12345"

<v>length<>="${#<v>string_1<>}"

<#># Returns 5<><>
@
@ count, size, ${#}



### String - Line Count

<cb>wc -l<>

Usage:

<cb><v>command<> | wc -l<>


Returns the number of lines in the string.
@
@ show, view, find, get
@ wc -l



### String - Line N

<cb>sed -n '<v>line_number<>p'<>

Usage:

<cb><v>command<> | sed -n '<v>line_number<>p'<>


Returns a particular line from some output.

Enter the line number followed by 'p'.
@
@ middle
@ sed -n



### String - Lines N to M

<cb>sed -n '<v>n<>,<v>m<>p'<>

Usage:

<cb><v>command<> | sed -n '<v>n<>,<v>m<>p'<>


Returns the lines from line number <c><v>n<><> to line number <c><v>m<><>.

Line numbers start at 1.
@
@ middle
@ sed -n



### String - Word Count

<cb>wc -w<>

Usage:

<cb><v>command<> | wc -w<>


Returns the number of words in a string.
@
@ show, view, find, get
@ wc -w



# String - Comparison Operators
@
@ ops-only, string-operators-only, operators-only
@ string-only, strings-only, str-only, text-only


### String - Contains?

<cb>$<v>string_1<> =~ $<v>substring<><>

Usage:

<cb>if [[ $<v>string_1<> =~ $<v>substring<> ]] ; then
	<v>...<>
fi<>


Returns true if the first string contains the second.
@
@ is substring, in, includes
@ =~



### String - Is Equal?

<cb>$<v>string_1<> = "<v>value<>"<>

<cb>$<v>string_1<> = $<v>string_2<><>

<cb>$<v>string_1<> == $<v>string_2<><>

Usage:

<cb>if [[ $<v>string_1<> = <v>"value"<> ]] ; then
	<v>...<>
fi<>


Returns true if two strings are equal.

= vs ==

<*>Both compare Strings
= is POSIX-standard.
== Supports Pattern Matching<>

<*>Prefer =<>
@
@ Equals, ==



### String - Not Equal?

<cb>$<v>string_1<> != <v>value<><>

<cb>$<v>string_1<> != $<v>string_2<><>

Usage:

<cb>if [[ $<v>string_1<> == "<v>value<>" ]] ; then
	<v>...<>
fi<>


Returns true if the strings are not identical.
@
@ Equals, is, !=



### String - Is Empty or Unset?

<cb>-z $<v>variable_1<><>

Usage:

<cb>if [[ -z $<v>variable_1<> ]] ; then
	<v>...<>
fi<>


Returns true if the variable is an empty string or unset.

Bash treats unset variables and length zero values as the same.
@
@ null, not present, no value, blank, is missing, op-only
@ -z



### String - Not Empty?

<cb>-n $<v>variable_1<><>

Usage:

<cb>if [[ -n $<v>variable_1<> ]] ; then
	<v>...<>
fi<>


True if has a value (has length greater than 0.).

False if unset or empty string.
@
@ not null, is set, has value, blank, op-only
@ -n



### String - Is Integer

<cb>$<v>value_1<> =~ ^-?[0-9]+$<>

Usage:

<cb>if [[ $<v>value_1<> =~ ^-?[0-9]+$ ]] ; then
	<v>...<>
fi<>


Returns true if a string is an integer value.

Matches positive and negative integers.
@
@ is number, an, check
@ =~



### String - Matches Regular Expression

<cb>$<v>value_1<> =~ <v>match_expression<><>

Usage:

<cb>if [[ $<v>value_1<> =~ <v>match_expression<> ]] ; then
	<v>...<>
fi<>


Returns true if a string matches the expression.


Sheets: <l "regular_expressions">Regular Expressions SpeedSheet<>
@
@ regex, check, equals, compare
@ =~



### String - Ends With?

<cb>"$<v>string_1<>" == *"$<v>end<>"<>

Usage:

<cb>if [[ $<v>string_1<> == *"$<v>end<>" ]] ; then
	<v>...<>
fi<>


Returns true if a string ends with the given suffix.



### String - Starts With?

<cb>"$<v>string_1<>" == "$<v>start<>"*<>

Usage:

<cb>if [[ $<v>string_1<> == "$<v>start<>"* ]] ; then
	<v>...<>
fi<>


Returns true if a string starts with the given start string.



# String - Operations
@
@ ops-only, string-operations-only, operations-only
@ string-only, strings-only, str-only, text-only



### String - Append

<cb><v>string_1<>+="<v>appended_value<>"<>

<cb><v>string_1<>+="$<v>string_2<>"<>


Appends a value to a variable.


Example:

<cb><v>string_1<>="abc"
<v>string_2<>="123"

<v>string_1<>+="$<v>string_2<>"

echo "$<v>string_1<>"

<#># Prints: abc123<><>
@
@ =+



### String - Concatenate

<cb>"$<v>string_1<>$<v>string_2<>"<>

Usage:

<cb><v>concatenated<>="$<v>string_1<>$<v>string_2<>"<>


Concatenates two strings together.


Example:

<cb><v>string_1<>="abc"
<v>string_2<>="123"

<v>concatenated<>="$<v>string_1<>$<v>string_2<>"

echo "$<v>concatenated<>"

<#># Prints: abc123<><>
@
@ join, combine



### String - Lines - Filter

<cb>| grep <v>regular_expression<><>

Usage:

<cb>="$(echo "$<v>string_1<>" | grep <v>regular_expression<>)"<>


Returns all lines that match the expression.

Filter lines using grep's regular expressions.


Example:

<cb><v>lines<>='one
two
three'

<v>filtered<>="$(echo "$<v>lines<>" | grep "t")"

echo "$<v>filtered<>"

<#># Prints:
\#
\#   two
\#   three<><>


Regular Expression Syntax: <l regular_expressions>Regular Expressions SpeedSheet<>
@
@ regex, regular expressions, select
@ grep



### String - Lines - Iterate

<cb>while read -r <v>line<> ; do
	<v>...<>
done \<\<\< "$<v>lines<>"<>


Iterate over a string's lines using <c>while read<>.


Example:

<cb><v>lines<>='one
two
three'

while read -r <v>line<> ; do
	echo "l: $<v>line<>"
done \<\<\< "$<v>lines<>"

<#># Prints:
\#
\#   l: one
\#   l: two
\#   l: three<><>
@
@ while done, loop over, for each
@ read, -r



### String - Pad Left

<cb>printf "%*s" <v>length<> "$<v>string_1<>"<>

Usage:

<cb><v>padded<>="$(printf "%*s" <v>length<> "$<v>string_1<>")"<>


Pads a string to the left with spaces.


Example:

<cb><v>string_1<>='abcd'

<v>padded<>="$(printf "%*s" 10 "$<v>string_1<>")"

echo "'$<v>padded<>'"

<#># Prints: '      abcd'<><>
@
@ pad-left, align-left, right-justify, right justify, start
@ printf



### String - Pad Left With Character

Use This Function:

<cb>pad_left() {
	local <v>content<>="$1"
	local <v>padding<>="$2"
	local <v>length<>="$3"

	padded=""
	for i in $(seq ${#<v>content<>} $<v>length<>); do
		<v>padded<>+="$<v>padding<>"
	done
	echo "$<v>padded<>$<v>content<>"
}<>

Usage:

<cb>pad_left "$<v>string_1<>" "$<v>pad_char<>" <v>length<><>

<cb><v>padded<>="$(pad_left "$<v>string_1<>" "$<v>pad_char<>" <v>length<>)"<>


Pads a string on the left with whatever characte you want.

There is no easy way to do this in Bash but this function will work fine.
This only works with single characters.


Example:

<cb>pad_left() {
	local <v>content<>="$1"
	local <v>padding<>="$2"
	local <v>length<>="$3"

	padded=""
	for i in $(seq ${#<v>content<>} $<v>length<>); do
		<v>padded<>+="$<v>padding<>"
	done
	echo "$<v>padded<>$<v>content<>"
}

<v>string_1<>='abcd'

<v>padded<>="$(pad_left "$<v>string_1<>" "-" 10)"

echo "$<v>padded<>"

<#># Prints: -------abcd<><>
@
@ pad-left, align-left, right-justify, right justify, start



### String - Pad Right

<cb>printf "%s%*s" "$<v>string_1<>" <v>length<><>

Usage:

<cb><v>padded<>="$(printf "%s%*s" "$<v>string_1<>" <v>length<>)"<>


Pads a string with spaces.


Example:

<cb><v>string_1<>='abcd'

<v>padded<>="$(printf "%s%*s" "$<v>string_1<>" 10)"

echo "'$<v>padded<>'"

<#># Prints: 'abcd          '<><>
@
@ pad-right, align-right, left-justify, left jutify, end
@ printf



### String - Pad Right With Character

Use This Function:

<cb>pad() {
	local <v>content<>="$1"
	local <v>padding<>="$2"
	local <v>length<>="$3"

	padded="$<v>content<>"
	for i in $(seq ${#<v>content<>} $<v>length<>); do
		<v>padded<>+="$<v>padding<>"
	done
	echo "$<v>padded<>"
}<>

Usage:

<cb>pad "$<v>string_1<>" "$<v>pad_char<>" <v>length<><>

<cb><v>padded<>="$(pad "$<v>string_1<>" "$<v>pad_char<>" <v>length<>)"<>


Pads a string with whatever character you want.
This only works with single characters.


Example:

<cb>pad() {
	local <v>content<>="$1"
	local <v>padding<>="$2"
	local <v>length<>="$3"

	padded="$<v>content<>"
	for i in $(seq ${#<v>content<>} $<v>length<>); do
		<v>padded<>+="$<v>padding<>"
	done
	echo "$<v>padded<>"
}

<v>string_1<>='abcd'

<v>padded<>="$(pad "$<v>string_1<>" "-" 10)"

echo "$<v>padded<>"

<#># Prints: abcd-------<><>
@
@ pad-right, align-right, left-justify, left jutify, end



### String - Repeat

<cb>printf "%.0s$<v>string_1<>" {1..<v>count<>}<>

Usage:

<cb><v>repeated<>="$(printf "%.0s$<v>string_1<>" {1..<v>count<>})"<>


Repeats a string a specific number of times.

<c>{..}<> does not support variables. You must explicitly type a number.


Example:

<cb><v>string_1<>='#'

<v>repeated<>="$(printf "%.0s$<v>string_1<>" {1..<v>10<>})"

echo "$<v>repeated<>"

<#># Prints: ##########<><>


@
@ multiply, expand, multiple
@ printf



### String - Repeat - Using Variables

<cb>repeat_string() {
	local <v>text<>="$1"
	local <v>count<>="$2"
	local <v>repeat<>=''
	for <v>i<> in $(seq 1 $<v>count<>); do
		<v>repeat<>+=$<v>text<>
	done
	echo "$<v>repeat<>"
}<>

Usage:

<cb>repeat_string "$<v>string_1<>" $<v>count<><>

<cb><v>repeated<>="$(repeat_string "$<v>string_1<>" $<v>count<>)"<>


Repeats a string a specific number of times as defined in a variable.

Note: <c>repeat<> is a standard Bash command. This function must be named someting different (repeat_string in this case).


Example:

<cb>repeat_string() {
	local <v>text<>="$1"
	local <v>count<>="$2"
	local <v>repeat<>=''
	for <v>i<> in $(seq 1 $<v>count<>); do
		<v>repeat<>+=$<v>text<>
	done
	echo "$<v>repeat<>"
}

<v>string_1<>='a-'
<v>count<>=3

<v>repeated<>="$(repeat_string $<v>string_1<> $<v>count<>)"

echo "$<v>repeated<>"

<#># Prints: a-a-a-<><>
@
@ with



### String - Reverse

<cb>| rev<>

Usage:

<cb>="$(echo "$<v>string_1<>" | rev)"<>


Reverses a string.


Example:

<cb><v>string_1<>="<v>12345<>"

<v>reversed<>="$(echo "$<v>string_1<>" | rev)"

<#># Prints: 54321<><>
@
@ rev



### String - Substring

<cb>=${<v>string_1<>:<v>start<>:<v>length<>}<>


Returns a substring.

Start value is 0 based.


Example:

<cb><v>string_1<>="012345"
<v>substring<>=${<v>string_1<>:2:2}

echo "$<v>substring<>"

<#># Prints: 23<><>
@
@ slice, subslice, partial
@ ${}, ${:}, ${::}



### String - Substring - Left

<cb>=${<v>string_1<>:0:<v>length<>}<>


Returns a substring of given length.


Example:

<cb><v>string_1<>="012345"
<v>substring<>=${<v>string_1<>:0:2}

echo "$<v>substring<>"

<#># Prints: 01<><>
@
@ slice, subslice, partial
@ Start, Beginning
@ ${}, ${:}, ${0::}



### String - Substring - Right

<cb>=${<v>string_1<>:<v>start<>}<>

<cb>=${<v>string_1<>: -<v>length<>}<>


Returns the remainder of the string starting from the start position.

Start value is 0 based.
The length must have a space before the -.


Example:

<cb><v>string_1<>="012345"
<v>substring<>=${<v>string_1<>:2}

echo "$<v>substring<>"

<#># Prints: 2345<><>
@
@ slice, subslice, partial
@ last, end, partial, right
@ ${}, ${:}



### String - To Hash Code

Using OpenSSL:

<cb>echo "$string_1" | openssl dgst -sha256<>

Using sha256sum:

<cb>echo "$string_1" | sha256sum<>


Converts a string into a hash code.


Requirses that openssl or sha256sum be installed.
@
@ show, view, get, display
@ digest, hashing, openssl
@ convert, conversion, string-to, compute



### String - To Hex

<cb>echo "$string_1" | hexdump<>

Prints the string in hex values.
@
@ see, all, entire
@ show, view, get, display
@ hexdump, hex dump



### String - To Lower Case

<cb>=${<v>string_1<>,,}<>


Converts a string to lower case.

bash 4.0+ only.
Not supported by: sh, zsh
@
@ ${,,}



### String - To Upper Case

<cb>=${<v>string_1<>,}<>


Converts a string to upper case.

bash 4.0+ only.
Not supported by: sh, zsh
@
@ ${,}



### String - Words - Iterate

<cb>for <v>word<> in $<v>words<>; do
	<v>...<>
done<>


Iterate over a string's words using <c>for<>.

Do NOT surround <c>$<v>words<><> in quotes ("").


Example:

<cb><v>words<>='one two three'

for <v>word<> in $<v>words<>; do
	echo "w: $<v>word<>"
done

<#># Prints:
\#
\#   w: one
\#   w: two
\#   w: three<><>
@
@ while done, loop over, for each
@ read, -r, -a



# Array

<cb><v>array_1<>=(<v>one<> <v>two<> <v>three<>)<>

<cb><v>array_1<>=("<v>Item 0<>" "<v>Item 1<>" "<v>Item 2"<>)<>


Creates an array of items.

Separate items by spaces.
Do not use commas!
@
@ collections, create, new, define, instantiate
@ arrays, array-only, arrays-only, list, list-only



# Array Operations
@
@ arrays, array-only, arrays-only, list, list-only



### Array - Append

<cb><v>array_1<>+=(<v>item<>)
<v>array_1<>+=(<v>item_1<> <v>item_2<> <v>item_3<>)<>


Appends items to the end of the array.


Example:

<cb><v>array_1<>=(<v>one<> <v>two<>)

<v>array_1<>+=(<v>three<> <v>four<>)

echo "${<v>array_1<>[@]}"

<#># Prints: one two three four<><>



### Array - Concatenate Arrays

<cb>=(${<v>array_1<>[@]} ${<v>array_2<>[@]})<>


Joins two or more arrays together.
@
@ join, concatenate, combine, arrays, lists, append



### Array - Contains?

There is no built in way to do this. Create a function instead:

<cb>array_contains() {

	local <v>match<>="$1"
	shift
	local <v>items<>=("$@")

	for <v>item<> in "${<v>items<>[@]}"; do
		[[ $<v>item<> == $<v>match<> ]] && return
	done
	false
}<>

Call:

<cb>if array_contains "$<v>match<>" "${<v>array_1<>[@]}"; then <v>...<><>


Returns true when the value is found in the array.

Works with items containing spaces.


Example:

<cb>array_contains() {
	local <v>match<>="$1"; shift
	local <v>items<>=("$@")
	for <v>item<> in "${<v>items<>[@]}"; do [[ $<v>item<> == $<v>match<> ]] && return; done
	false
}

<v>array_1<>=(one two three)

if array_contains "${<v>array_1<>[@]}" "<v>two<>"; then
	echo "Contains two."
fi

<#># Prints: Contains two.<><>
@
@ has, check, exists, includes, in
@ item, value, element


### Array - Delete

<cb>unset <v>array_1<>[<v>position<>]<>


Removes an item from an array.

The item position is 0 based


Example:

<cb><v>array_1<>=("<v>one<>" "<v>two<>" "<v>three<>")

unset <v>array_1<>[1]

echo "${<v>array_1<>[@]}"
<#># Prints: one three<><>
@
@ remove from, one, single, position
@ item, value, element
@ unset



### Array - Delete First

<cb>unset <v>array_1<>[0]<>


Removes the first item from an array.

Updates the array in place.


Example:

<cb><v>array_1<>=("<v>one<>" "<v>two<>" "<v>three<>")

unset <v>array_1<>[0]

echo "${<v>array_1<>[@]}"
<#># Prints: two three<><>
@
@ remove from, one, single, left
@ item, value



### Array - Delete Last

<cb>unset '<v>array_1<>[-1]<>


Removes the last item from an array.

Updates the array in place.


Example:

<cb><v>array_1<>=("<v>one<>" "<v>two<>" "<v>three<>")

unset '<v>array_1<>[-1]'

echo "${<v>array_1<>[@]}"
<#># Prints: one two<><>
@
@ remove from, one, single, end
@ item, value
@ unset, [-1]



### Array - Get

<cb>${<v>array_1<>[<v>position<>]}<>

Usage:

<cb>=("${<v>array_1<>[<v>position<>]}")<>


Returns the value in the given position.

Positions are 0 based.


Example:

<cb><v>array_1<>=("<v>one<>" "<v>two<>" "<v>three<>")

echo "${<v>array_1<>[1]}"

<#># Prints: two<><>
@
@ item, element, value
@ retrieve



### Array - Get First

<cb>=${<v>array_1<>[0]}<>

Usage:

<cb>=("${<v>array_1<>[0]}")<>


Returns the first element in the array.


Example:

<cb><v>array_1<>=("<v>one<>" "<v>two<>" "<v>three<>")

echo "${<v>array_1<>[0]}"

<#># Prints: one<><>
@
@ item, element, value
@ retrieve
@ [0]



### Array - Get Last

<cb>${<v>array_1<>[-1]}<>

Usage:

<cb>=("${<v>array_1<>[-1]}")<>


Returns the last element in the array.


Example:

<cb><v>array_1<>=("<v>one<>" "<v>two<>" "<v>three<>")

echo "${<v>array_1<>[0]}"

<#># Prints: one<><>
@
@ item, element, value, end, rightmost
@ retrieve
@ [-1]



### Array - Get All Elements

<cb>${<v>array_1<>[@]}<>

Usage:

<cb>=("$<v>array_1<>[@]")<>


Retrieves all values from an array when returning, passing or accessing those elements.


Example:

<cb><v>array_1<>=("<v>one<>" "<v>two<>" "<v>three<>")

<v>all<>=${<v>array_1<>[@]}

echo "${<v>all<>[@]}"

<#># Prints: one two three<><>
@
@ expand
@ ${}, ${[@]}, [@]



### Array - Get All Except First

<cb>${<v>array_1<>[@]:1}<>

Usage:

<cb>=("$<v>array_1<>[@]")<>


Returns all elements in an array except the first.


Example:

<cb><v>array_1<>=("<v>one<>" "<v>two<>" "<v>three<>")

<v>remainder<>=${<v>array_1<>[@]:1}

echo "${<v>remainder<>[@]}"

<#># Prints: two three<><>
@
@ item,  value, remainder, to end, to last, 1st, but, expand
@ ${}, ${[@]}, [@]



### Array - Get All Except Last

<cb>${<v>array_1<>[@]::${#<v>array_1<>[@]}-1}<>

Usage:

<cb>=("${<v>array_1<>[@]::${#<v>array_1<>[@]}-1}")<>


Returns all elements in an array except the last.


Example:

<cb><v>array_1<>=("<v>one<>" "<v>two<>" "<v>three<>")

<v>subarray<>=${array_1[@]:0:${#array_1[@]}-1}

echo "${<v>subarray<>[@]}"

<#># Prints: one two<><>
@
@ item,  value, former, 1st, but, expand
@ ${}, ${[@]}, [@]



### Array - Is Empty?

<cb>${#<v>array_1<>[@]} -eq 0<>

Usage:

<cb>if [[ ${#<v>array_1<>[@]} -eq 0 ]]; then <v>...<><>


Returns true if the array is empty.
@
@ no size, size zero
@ ${#}, [@]



### Array - Not Empty?

<cb>${#<v>array_1<>[@]} -ne 0<>

Usage:

<cb>if [[ ${#<v>array_1<>[@]} -ne 0 ]]; then <v>...<><>


Returns true if the array is not empty.
@
@ size zero,
@ ${#}, [@]



### Array - Iterate

<cb>for <v>item<> in "${<v>array_1<>[@]}"
do
	<v>...<>
done<>


Iterates over all items in an array.


Example:

<cb><v>array_1<>=("<v>one<>" "<v>two<>" "<v>three<>")

for <v>item<> in "${array_1[@]}"
do
	echo "$<v>item<>"
done

<#># Prints:
\#
\#   one
\#   two
\#   three<><>
@
@ for in, items, elements, foreach, for each, iterating, values



### Array - Print

<cb>echo "${<v>array_1<>[@]}"<>


Prints out all values in an array.


Example:

<cb><v>array_1<>=(<v>one<> <v>two<> <v>three<>)

echo "${<v>array_1<>[@]}"

<#># Prints: one two three<><>
@
@ echo, show, view



### Array - Size

<cb>${#<v>array_1<>[@]}<>

Usage:

<cb>=("${#<v>array_1<>[@]}")<>


Returns the array size.


Example:

<cb><v>array_1<>=("<v>one<>" "<v>two<>" "<v>three<>")

echo "${#<v>array_1<>[@]}"

<#># Prints: 3<><>
@
@ count, length
@ ${#}, [@]



### Array - Slice

<cb>${<v>array_1<>[@]:<v>start<>:<v>length<>}<>

Usage:

<cb>=("${<v>array_1<>[@]:<v>start<>:<v>length<>}")<>


Returns a subarray from the original array.


Example:

<cb><v>array_1<>=(<v>1 2 3 4 5 6<>)

<v>array_2<>=("${<v>array_1<>[@]:<v>2<>:<v>3<>}")

<#># Returns (3 4 5)<><>
@
@ sublist, subarray, subslice, partial
@ items, elements, values
@ ${}, [@]



### Array - Slice - Left

<cb>${<v>array_1<>[@]::<v>length<>}<>

Usage:

<cb>=("${<v>array_1<>[@]::<v>length<>}")<>


Returns the first n items from an array.


Example:

<cb><v>array_1<>=(<v>1 2 3 4 5 6<>)

<v>array_2<>=("${<v>array_1<>[@]::<v>2<>}")

<#># Returns (1 2)<><>
@
@ sublist, subarray, subslice, partial
@ items, elements, values
@ Start, Beginning
@ ${}, ${:}, ${0::}, [@]



### Array - Slice - Right

<cb>${<v>array_1<>[@]:<v>start<>}<>

<cb>${<v>array_1<>[@]: -<v>length<>}<>

Usage:

<cb>=("${<v>array_1<>[@]:<v>start<>}")<>


Returns the last n items from an array.


Example:

<cb><v>array_1<>=(<v>1 2 3 4 5 6<>)

<v>array_2<>=("${<v>array_1<>[@]:<v>4<>}")

<#># Returns (5 6)<><>
@
@ sublist, subarray, subslice, partial
@ items, elements, values
@ last, end, right
@ ${}, ${:}, [@]



### Array - Sort

<cb>| tr ' ' '\\n' | sort<>

Usage:

<cb>=($(echo "${<v>array_1<>[@]}" | tr ' ' '\\n' | sort))<>


Sorts an array.


Example:

<cb><v>array_1<>=(b c a)

<v>sorted<>=($(echo "${<v>array_1<>[@]}" | tr ' ' '\\n' | sort))

echo "${<v>sorted<>[@]}"

<#># Prints: a b c<><>



### Array - To String

<cb>="${<v>array_1<>[@]}"<>


Converts an array into a string.
@
@ from, convert, conversion, converting
@ array-to, from-array, to-string



# Associative Arrays

A dictionary or map of name value pairs.

Requires: Bash 4+
@
@ associative-array-only, associative-arrays-only, ass-only, associative-only


## Associative Array - Define


### Associative Array - Define Empty

<cb>declare -A <v>dict_1<><>


Defines an empty associative array.
@
@ new, create, instantiate
@ declare, -A



### Associative Array - Define with Values

<cb>declare -A <v>dict_1<>

<v>dict_1<> = (
	[<v>name<>]=<v>value<>
	[<v>name<>]=<v>value<>
	[<v>name<>]=<v>value<>
)<>


Defines a new associative array with.


Example:

<cb>declare -A <v>dict_1<>

<v>dict_1<>=(
	[a]="a one"
	[b]="b two"
	[c]="c three"
)<>
@
@ new, create, instantiate
@ declare, -A, (), []



## Associative Array - Operations


### Associative Array - Add / Update

<cb><v>dict_1<>[<v>name<>]=<v>value<><>


Adds or updates an entry in the associate array.


Example:

<cb>declare -A <v>dict_1<>

<v>dict_1<>[<v>a<>]="<v>a one<>"<>
@
@ set, put, insert, modify, change, item, element, value, append to



### Associative Array - Delete

<cb>unset <v>dict_1<>[<v>name<>]<>


Deletes a name value pair from the array.


Example:

<cb>declare -A <v>dict_1<>

<v>dict_1<>=(
	[a]="a one"
	[b]="b two"
	[c]="c three"
)

unset <v>dict_1<>[<v>a<>]<>
@
@ remove, element, item, by name
@ unset



### Associative Array - Get Keys

<cb>="${!<v>dict_1<>[@]}"<>

Returns all the keys in the associative array.

There is no order to the results.
@
@ retrieve, all, names
@ [@], !, ${!}



### Associative Array - Get Keys with IFS Character Separator

<cb>="${!<v>dict_1<>[*]}"<>

Returns all the keys in the associative array as a single word but each value separated by an <c>IFS<> character.

Returned as a single value.
All values are separated by an IFS character.
The character used is the first character defined in <c>IFS<>.
@
@ retrieve, all, names
@ [*], !, ${!}



### Associative Array - Get Value

<cb>="${<v>dict_1<>[<v>name<>]}"<>


Returns a value from the array.
@
@ retrieve, item, element, value



### Associative Array - Get Values

<cb>="${<v>dict_1<>[@]}"<>


Returns a value from the array.
@
@ retrieve, items, elements, values, all
@ [@]



### Associative Array - Get Values with IFS Character Separator

<cb>="${<v>dict_1<>[*]}"<>


Returns all values from the array as a single word but each value separated by an <c>IFS<> character.

Returned as a single value.
All values are separated by an IFS character.
The character used is the first character defined in <c>IFS<>.
@
@ retrieve, items, elements, values
@ [*]



### Associative Array - Iterate

<cb>for <v>key<> in "${!<v>dict_1<>[@]}"; do
	echo "    ${<v>key<>} => ${<v>dict_1<>[${<v>key<>}]}"
done<>


Iterates over all key values in the array.




# Files
@
@ file-only, files-only



### File Permission - Notation

<cb>drwxrwxrwx+<>

d	Directory
. rwx … … .	Owner
. … rwx … .	Group
. … … rwx .	Everyone
. … … … +	Additional Permissions

r	Read
w	Write
x	Execute
@
@ read, write, execute, directory, permissions
2 rwd



### File Mode Notation

1	Execute
2	Write
4	Read



# Functions
@
@ func-only, function-only, functions-only


### Function - Basics

Define:

<cb><v>function_1<>() {
	<v>...<>
}<>

Function Arguments:

<cb><v>function_1<>() {
	local <v>var_1<>="$1"
	local <v>var_2<>="$2"
	local <v>remainder<>=("${@:2}")
	<v>...<>
}<>

Return Exit Code:

<cb><v>function_1<>() {
	return <v>int_value<>
}<>

Return Output:

<cb><v>function_1<>() {
	echo "<v>return value<>"
}<>


Call:

<cb><v>function_1<><>

Call With Arguments:

<cb><v>function_1<> $<v>argument_1<> $<v>argument_2<><>

Call, Get Exit Code:

<cb><v>function_1<>
<v>return<>=$?<>

Call, Get Return Output:

<cb><v>return<>="$(<v>function_1<>)"<>

Call with Arguments and Return Output:

<cb><v>return<>="$(<v>function_1<> "$<v>argument_1<>" "$<v>argument_2<>")"<>
@
@ summary



### Function - Create

<cb><v>function_name<>() {
	<v>...<>
}<>

<cb>function <v>function_name<>() {
	<v>...<>
}<>


Defines a function.


Example:

<cb><v>print_hello<>() {
	echo "Hello!"
}

<v>print_hello<><>
@
@ new, define



### Function - Create Empty Function

<cb><v>function_name<>() {
	:
}<>


Creates an empty function.

Use '<c>:<>' (noop function) to allow you to create an empty function.
@
@ pass, :



### Function - Arguments - Define

<cb><v>function_name<>() {
	local <v>argument_1<>="$1"
	local <v>argument_2<>="$2"
	<v>...<>
}<>


Get arguments passed to a function using $1, $2, $3 etc

Arguments passed to a function are handled exactly like arguments passed to a script.
A function will accept any number of arguments


Example:

<cb><v>print_value<>() {

	local <v>value<>="$1"
	echo "Value = $<v>value<>"
}

<v>print_value<> "<v>abc<>"<>
@
@ local
@ arg-only, args-only, arguments-only, param-only, params-only, parameters, params
@ pass, passing



### Function - Arguments - Define Array Argument

<cb><v>function_name<>() {
	local <v>arguments<>=("$@")
	<v>...<>
}<>


Reads all function arguments into a single variable.


Example:

<cb><v>print_items<>() {

	local <v>items<>=("$@")

	local <v>item<>
	for <v>item<> in "${<v>items<>[@]}"; do
		echo "$<v>item<>"
	done
}


<v>items<>=(one two three)
<v>print_items<> "${<v>items<>[@]}"

<#>\# Prints:
\#
\#   one
\#   two
\#   three<><>
@
@ list
@ ("$@")



### Function - Call

<cb><v>function_name<><>


Calles the function.

Call using the name and nothing else.
Do not add '<c>()<>' after the name.


Example:

<cb><v>say_hello<>() {
	echo "Hello."
}

<v>say_hello<><>



### Function - Call with Arguments

<cb><v>function_name<> <v>argument_1<> <v>argument_2<><>

<cb><v>function_name<> "$<v>value_1<>" $"<v>argument_2<>"<>


Calls the function and passes in arguments.

Arguments will be set to $1, $2, $3, etc. inside the function.
Use quotes around arguments to copy values with spaces correctly.

Example:

<cb><v>print_value<>() {

	local <v>value<>="$1"
	echo "Value = $<v>value<>"
}

<v>print_value<> "<v>value one<>"<>
@
@ arguments, values, list
@ arg-only, args-only, arguments-only, param-only, params-only, parameters, params
@ pass, passing, spaces



### Function - Call with Arguments, Return String

<cb><v>result<>="$(<v>function_1<> "$<v>argument_1<>")"<>


Use when you need to call a function with arguments and also get the response.

This correctly passes arguments containing spaces.
Seriously, embed the quotes. This is some funky shit but it works.
@
@ Return value capture, get response, result, string, text, spaces, pass, passing
@ arg-only, args-only, arguments-only, param-only, params-only, parameters, params



### Function - Call with Array

<cb><v>function_name<> "${<v>array_1<>[@]}"<>


Use [@] to pass an array to a function.


Example:

<cb><v>print_items<>() {

	local <v>items<>=("$@")

	local <v>item<>
	for <v>item<> in "${<v>items<>[@]}"; do
		echo "$<v>item<>"
	done
}


<v>items<>=(one two three)
<v>print_items<> "${<v>items<>[@]}"

<#>\# Prints:
\#
\#   one
\#   two
\#   three<><>
@
@ pass, passing, an
@ arg-only, args-only, arguments-only, param-only, params-only, parameters, params



### Function Return - Exit Code - Return

<cb>return <v>number<><>

Usage:

<cb><v>function_1<>() {
	return <v>number<>
}<>


Returns an integer result code to the caller.


Example:

<cb><v>function_1<>() {
	return 1
}

<v>function_1<>
<v>return_code<>=$?
echo "$<v>return_code<>"

<#># Prints: 1<><>
@
@ Return value capture, get response, result, integer, set, result



### Function Return - Exit Code - Get

<cb><v>return_value<>=$?<>

Usage:

<cb><v>function_1<>
<v>return_value<>=$?<>


Gets exit code from a function.

The exit code is a number.


Example:

<cb><v>function_1<>() {
	return 1
}

<v>function_1<>
<v>return_code<>=$?
echo "$<v>return_code<>"

<#># Prints: 1<><>
@
@ Return value capture, get response, result, integer, result



### Function Return - Exit Code - Boolean - Return

True:

<cb>true
return<>

False:

<cb>false
return<>


Use true or false to set a boolean exit value.

<c>true<> / <c>false<> sets the exit code.
Follow this with <c>return<> to pass that exit code to the caller.
<c>return<> is not needed if this is the last line of the function.

<c>true<>: Omit the true command if the last operation was successful. The exit code is already set to true (0).
<c>return<>: Omit the return it's the last line in a script or function.


Example:

<cb><v>is_yes<>() {

	local <v>value<>="$1"

	if [[ $<v>value<> == 'yes' ]]; then
		return   <#>#1<>
	fi
	false        <#>#2<>
}


if <v>is_yes<> yes; then
	echo "Yes"
else
	echo "No"
fi

if <v>is_yes<> no; then
	echo "Yes"
else
	echo "No"
fi

<#># Prints:
\#
\#   Yes
\#   No<>

<#>#1 - True not needed here as last operation was successful and set exit code to true (0)<>

<#>#2 - Return not in the last line of the function. Return is automatic.<><>
@
@ return value capture, get response, result, boolean, true, false



### Function Return - Exit Code - Boolean - Return to If

<cb>if <v>function_1<>; then<>

<cb>if ! <v>function_1<>; then<>

<cb>if <v>function_1<> <v>arguments<>; then<>


Passes the function exit code to an if statement.

If 0, executes the first part of the if statement.
If non 0, executes the else part.


0		= true
non 0	= false


Example:

<cb><v>is_true<>() {
	true
}

if <v>is_true<>; then
	echo "Returned true"
else
	echo "Returned false"
fi;

<#># Prints: returned True<><>
@
@ return, response, result, value capture, get response, result, true, false



### Function Return - Exit Code - Integer - Return to If

<cb>if [[ $? -eq <v>number<> ]]; then<>

Usage:

<cb><v>function_1<>
if [[ $? -eq <v>number<> ]]; then
	<v>...<><>


Tests the result code returned by a function.

Must be tested right after the function call.
Will return values up to 255 but you should keep them under 126 as values over this have special meanings.


Example:

<cb><v>function_1<>() {
	return 1
}

<v>function_1<>

if [[ $? -eq 1 ]]; then
	echo "Returned 1"
else
	echo "Did not return 1"
fi;

<#># Prints: Returned 1<><>
@
@ return value capture, get response, result, integer



### Function Return - String - Return

<cb>echo "<v>returned value<>"<>

Returns: String


Return values by sending it to the standard out.

Capture returned values using <c>"$(<v>function_1<>)"<>.


Example:

<cb><v>return_string<>() {
	echo "<v>The returned text.<>"
}

<v>result<>="$(<v>return_string<>)"
echo "$<v>result<>"

<#># Prints: The returned text.<><>
@
@ Return value capture, get response, result, string, text, set, standard output
@ "$()"



### Function Return - String - Get

<cb><v>return_value<>="$(<v>function_1<>)"<>


Get the value returned through the standard out of a function.


Example:

<cb><v>return_string<>() {
	echo "<v>The returned text.<>"
}

<v>result<>="$(<v>return_string<>)"
echo "$<v>result<>"

<#># Prints: The returned text.<><>
@
@ Return value capture, get response, result, string, text, set, standard output
@ "$()"



### Function - Test Function

<cb><v>test_function_1<>() {
	[[ <v>condition<> ]]
}<>

Usage:

<cb><v>test_function_1<>() {
	[[ <v>condition<> ]]
}

if <v>test_function_1<> $<v>param_1<> <v>...<> ; then
	...
fi<>


Tests a condition and sets the exit code.

Passes when the exit code = 0.
Fails when the exit code is non 0.


Example:

<cb>not_empty() {
	[[ ! -z $<v>1<> ]]
}

<v>value<>="a value"

not_empty "$<v>value<>" && echo "Value is not empty."

<#># Prints: Value is not empty.<><>
@
@ [[ ]], conditional



# Exit Script
@
@ exit-only, exiting-only, terminate-only, end


## Exiting


### Exit - Terminate

<cb>exit<>


Terminates the script and ends the current process.
@
@ end, script



### Exit - Terminate With Exit Code

<cb>exit <v>exit_code<><>


Terminates the script while returning an exit code.

The return value can be retrievef with <c>$?<>.
@
@ result, value, response code, error code, script, return
@ exit



### Exit - Return Exit Code

<cb>return<>

Return With Return Value:

<cb>return <v>exit_value<><>


Returns control to the calling script.

Does not end the current process.
Can only be used inside a function or sourced script.
@
@ end, script
@ return



### Exit Code - Get

<cb>=$?<>

Usage:

<cb><v>exit_code<>=$?<>


Gets the exit code returned by a function or command.
@
@ get, find, retrieve, capture, script



### Exit Code - Set

<cb>(exit <v>exit_code<>)<>

Usage:

<cb><v>exit_code<>=$?<>


Sets the exit code.

Does not end the script as <c>()<> runs the command in a subshell.


Example:

<cb>(exit 2)
echo "$?"

<#># Prints: 2<><>
@
@ get, find, retrieve, capture, script



## Exit - Standard Exit Codes
@ 
@ status, return value, response, error code
@ exit-codes-only


### Exit Code - OK / Successful

OK Exit Code:

<cb>0<>
@
@ 0, successful


### Exit Code - Error

Recommended Error Exit Codes:

<cb>1-127<>



### Exit Code - Error / General Error

<cb>1<>


Use to indicate a general exception.
@
@ 1


### Exit Code - Error / User Error

<cb>2<>


Use to indicate a user error or invalid command argument.

These are guideline more than rule.
@
@ 2



### Exit Code - Error / Command Not Found / Syntax Error

<cb>127<>


Generally returned when a command was not found or couldn't be executed (eg was misspelled).

It is recommended to not use this and leave it for the shell.
@
@ 127



## exit vs return

Exit:

<*>Exits the Script and Ends the Process
Execute from Anywhere Within a Script
May Return an <c>exit Code<>.<>

Return:

<*>Returns Control to the Caller
Use From Inside Function or Sourced Script Only
May Return an <c>exit Code<>.<>



# Standard Environment Variables
@
@ standard-only, std-only


## Standard Variables - Summary

<t><c>$BASH_VERSION<><|>Bash Version
<c>$HOME<><|>User Home Directory
<c>$HOSTNAME<><|>Computer Host Name
<c>$IFS<><|>Internal Field Separator
<c>$OLDPWD<><|>The Previous Working Directory
<c>$PATH<><|>Command Search Path
<c>$PS1<><|>Primary Prompt String
<c>$PS2<><|>Secondary Prompt String
<c>$PWD<><|>Current Directory
<c>$RANDOM<><|>Random Number
<c>$SHELL<><|>Default Shell Path
<c>$UID<><|>User ID
<c>$USER<><|>User Name<>



## Standard Variables - Details


### BASH_VERSION

<cb>$BASH_VERSION<>


Gives the version of Bash.
@
@ $bash_version, bash_version


### HOME

<cb>$HOME<>

<cb>echo "$HOME"<>


Returns the user's home directory.


e.g. <c>/home/user-1<>
@
@ $home



### HOSTNAME

<cb>$HOSTNAME<>


The host name for the computer you are on.
@
@ $hostname, host name, server, computer



### IFS

<cb>$IFS<>


Returns the characters used to define the internal field separator.

Used by Bash as the characters that delimit fields in a string.
Can be changed if needed but should be reverted back.


Bash default value (space, tab, newline):

<cb><m> <>\\t\\n<>
@
@ delimiter, characters, \t, \n
@ $ifs



### OLDPWH

<cb>$OLDPWH<>

The previous directory you visited.
@
@ previous, old, present working directory
@ $oldpwd, pwd



### PATH

<cb>$PATH<>

<cb>echo "$PATH"<>


This is the list of directories Bash searches when executing a command.
@
@ $path



### PS1

<cb>$PS1<>


The primary prompt string.
@
@ $ps1, prompt string



### PS2

<cb>$PS2<>


The secondary prompt string.

Used for multiline commands.
@
@ $ps1, prompt string



### PWD

<cb>$PWH<>

The current directory.
@
@ present working directory
@ $PWD



### RANDOM

<cb>$RANDOM<>


Returns a random positive integer.

Range: 0 - 32,767
@
@ integer
@ $random



### SHELL

<cb>$SHELL<>


The path to the default shell.
@
@ $shell



### UID

<cb>$UID<>

The user ID code.
@
@ $UID, user id



### USER

<cb>$USER<>


The user name.
@
@ user name, $user



# Files
@
@ files-only, file-only


## File - Operators - Basics

Operators:

<in 2><table><col><c>-a <v>file_name<><><><col>Exists?<>
<col><c>-b <v>file_name<><><><col>Block special file?<>
<col><c>-c <v>file_name<><><><col>Character special file?<>
<col><c>-d <v>file_name<><><><col>Directory?<>
<col><c>-e <v>file_name<><><><col>Exists?<>
<col><c>-f <v>file_name<><><><col>Is regular file?<>
<col><c>-g <v>file_name<><><><col>set-group-id set?<>
<col><c>-G <v>file_name<><><><col>Belongs to user's primary group?<>
<col><c>-h <v>file_name<><><><col>Symbolic link file?<>
<col><c>-k <v>file_name<><><><col>Sticky bit set?<>
<col><c>-L <v>file_name<><><><col>Symbolic link file?<>
<col><c>-N <v>file_name<><><><col>Modified since last read?<>
<col><c>-O <v>file_name<><><><col>Belongs to user's user id?<>
<col><c>-p <v>file_name<><><><col>Named pipe?<>
<col><c>-r <v>file_name<><><><col>Readable?<>
<col><c>-s <v>file_name<><><><col>Non-empty?<>
<col><c>-S <v>file_name<><><><col>Inter-process socket?<>
<col><c>-u <v>file_name<><><><col>set-user-id set?<>
<col><c>-w <v>file_name<><><><col>Writable?<>
<col><c>-x <v>file_name<><><><col>Executable?<>
<col> <>
<col><c><v>file_1<> -ef <v>file_2<><><><col>Same device and iNode number?<>
<col><c><v>file_1<> -nt <v>file_2<><><><col>Newer than file 2?<>
<col><c><v>file_1<> -ot <v>file_2<><><><col>Older than file 2, or doesn't exist but file 2 does?<><><>

By Purpose:

<in 2><table><col>Exists?<><col><c>-a <v>file_name<><>		<><col>(same as -e)<>
<col>Exists?<><col><c>-e <v>file_name<><><><col>(same as -a)<>
<col>Been modified since last read?<><col><c>-N <v>file_name<><><>
<col>Belongs to user's primary group?<><col><c>-G <v>file_name<><><>
<col>Belongs to user's user id?<><col><c>-O <v>file_name<><><>
<col>Block special file?<><col><c>-b <v>file_name<><><>
<col>Character special file?<><col><c>-c <v>file_name<><><>
<col>Directory?<><col><c>-d <v>file_name<><><>
<col>Executable?<><col><c>-x <v>file_name<><><>
<col>Inter-process socket?<><col><c>-S <v>file_name<><><>
<col>Named pipe?<><col><c>-p <v>file_name<><><>
<col>Non-empty?<><col><c>-s <v>file_name<><><>
<col>Read only?<><col><c>-r <v>file_name<><><>
<col>Regular file?<><col><c>-f <v>file_name<><><>
<col>Set-group-id set?<><col><c>-g <v>file_name<><><>
<col>Sticky bit set?<><col><c>-k <v>file_name<><><>
<col>Symbolic link file?<><col><c>-h <v>file_name<><><><col>(same as -L)<>
<col>Symbolic link file?<><col><c>-L <v>file_name<><><><col>(same as -h)<><><>
@
@ ops-only, operators-only, operator-only
@ summary



## File - Operators - Details
@
@ ops-only, operators-only, operator-only


### File - Exists?

<cb>-e <v>file_name<><>

<cb>-a <v>file_name<><>

Usage:

<cb>if [[ -e <v>file_name<> ]] <v>...<><>


Returns true if the file exists (any kind of file or directory).

-e and -a are equivalent.
@
@ path, directory, folder, has, op-only
@ -e, -a



### File - Does Not Exist?

<cb>! -e <v>file_name<><>

<cb>! -a <v>file_name<><>

Usage:

<cb>if [[ ! -e <v>file_name<> ]] <v>...<><>


Returns true if the file does not exist (no file of any kind).

-e and -a are equivalent.
@
@ path, op-only
@ -e, !



### File - Is a Regular File?

<cb>-f <v>file_name<><>

Usage:

<cb>if [[ -f <v>file_name<> ]] <v>...<><>


Returns true if the file exists and is a normal file (not a directory, link or other file type).
@
@ has, path, op-only
@ -f



### File - Not a Regular File?

<cb>! -f <v>file_name<><>

Usage:

<cb>if [[ ! -f <v>file_name<> ]] <v>...<><>


Returns true if the file does not exist or is not a file (eg maybe a directory or link).
@
@ !, -f, op-only



### File - Is Executable?

<cb>-x <v>file_name<><>

Usage:

<cb>if [[ -x <v>file_name<> ]] <v>...<><>


Returns true if the file is executable.
@
@ op-only
@ -x



### File - Is Named Pipe?

<cb>-p <v>file_name<><>

Usage:

<cb>if [[ -p <v>file_name<> ]] <v>...<><>


Returns true when exists and named pipe.
@
@ path, is a, has, op-only
@ -p



### File - Is Empty?

<cb>! -s <v>file_name<><>

Usage:

<cb>if [[ ! -s <v>file_name<> ]] <v>...<><>


Returns true when either does not exist or is empty.
@
@ path, is a, not empty, op-only
@ -s



### File - Is Non-empty?

<cb>-s <v>file_name<><>

Usage:

<cb>if [[ -s <v>file_name<> ]] <v>...<><>


Returns true when exists and is non-empty.
@
@ path, is a, not empty, has contents, op-only
@ -s



### File - Is Newer Than?

<cb><v>file_1<> -nt <v>file_2<><>

Usage:

<cb>if [[ <v>file_1<> -nt <v>file_2<> ]] <v>...<><>


Returns true when file_1 is newer than file_2.

-nt		Newer Than
@
@ path, date, timestamp, 1st, first, 2nd, second, compare, comparison, before, after
@ -nt



### File - Is Older Than?

<cb><v>file_1<> -ot <v>file_2<><>

Usage:

<cb>if [[ <v>file_1<> -ot <v>file_2<> ]] <v>...<><>


Returns true when file_1 is older than file_2.

-ot		Older Than
@
@ path, date, timestamp, 1st, first, 2nd, second, compare, comparison, before, after
@ -ot



### File - Is Read Only?

<cb>! -w <v>file_name<><>

Usage:

<cb>if [[ ! -w <v>file_name<> ]] <v>...<><>


Returns true when either does not exist or is read only.
@
@ path, is a, read only?, read-only?, has readonly flag, op-only
@ -w, !



### File - Is Readable?

<cb>-r <v>file_name<><>

Usage:

<cb>if [[ -r <v>file_name<> ]] <v>...<><>


Returns true if the file exists and is readable.
@
@ has readonly flag, op-only
@ -r



### File - Is Same File?

<cb><v>file_1<> -ef <v>file_2<><>

Usage:

<cb>if [[ <v>file_1<> -ef <v>file_2<> ]] <v>...<><>


Returns true when file_1 is the same device and iNode number as file_2.

-ef		Equal Files
@
@ path, is a, same as, 1st, first, 2nd, second, compare, comparison
@ -ef



### File - Not Same File?

<cb>! <v>file_1<> -ef <v>file_2<><>

Usage:

<cb>if [[ ! <v>file_1<> -ef <v>file_2<> ]] <v>...<><>


Returns true when file_1 is the same device and iNode number as file_2.

-ef		Equal Files
@
@ path, is a, same as, 1st, first, 2nd, second, compare, comparison, different
@ -ef, !



### File - Is Socket?

<cb>-S <v>file_name<><>

Usage:

<cb>if [[ -S <v>file_name<> ]] <v>...<><>


Returns true when exists and is an inter-process socket.
@
@ path, is a, Inter-process
@ -S



### File - Is Symbolic Link?

<cb>-h <v>file_name<><>

<cb>-L <v>file_name<><>

Usage:

<cb>if [[ -L <v>file_name<> ]] <v>...<><>


Returns true when exists and is a symbolic link.

-h and -L are equivalent.
@
@ path, is a, op-only
@ -h, -L



### File - Is Writable?

<cb>-w <v>file_name<><>

Usage:

<cb>if [[ -w <v>file_name<> ]] <v>...<><>


Returns true when exists and writable?
@
@ path, is a, read only?, op-only
@ -w



### File - Belongs To User's Primary Group?

<cb>-G <v>file_name<><>

Usage:

<cb>if [[ -G <v>file_name<> ]] <v>...<><>


Returns true when exists and belongs to user's primary group.
@
@ path, is a, gid, op-only
@ -G



### File - Belongs To User's User Id?

<cb>-O <v>file_name<><>

Usage:

<cb>if [[ -O <v>file_name<> ]] <v>...<><>


Returns true when exists and belongs to user's user id.
@
@ path, is a, uid, op-only
@ -O



### File - Block Special File?

<cb>-b <v>file_name<><>

Usage:

<cb>if [[ -b <v>file_name<> ]] <v>...<><>


Returns true when exists and is a block special file.
@
@ path, is a, op-only
@ -b



### File - Character Special File?

<cb>-c <v>file_name<><>

Usage:

<cb>if [[ -c <v>file_name<> ]] <v>...<><>


Returns true when exists and is a character special file.
@
@ path, is a, op-only
@ -c



### File - Has set-group-id Set?

<cb>-g <v>file_name<><>

Usage:

<cb>if [[ -g <v>file_name<> ]] <v>...<><>


Returns true when exists and has the set-group-id set.
@
@ path, is a, op-only
@ -g



### File - Has set-user-id Set?

<cb>-u <v>file_name<><>

Usage:

<cb>if [[ -u <v>file_name<> ]] <v>...<><>


Returns true when exists and has the set-user-id set.
@
@ path, is a, op-only
@ -u



### File - Has Sticky Bit Set?

<cb>-k <v>file_name<><>

Usage:

<cb>if [[ -k <v>file_name<> ]] <v>...<><>


Returns true when exists and has the sticky bit set.
@
@ path, is a, op-only
@ -k




### File - Modified Since Last Read?

<cb>-N <v>file_name<><>

Usage:

<cb>if [[ -N <v>file_name<> ]] <v>...<><>


Returns true when exists and has been modified since the last read.
@
@ path, is a, has, op-only
@ -N



## File - Contents



### File - First Lines

<cb>head <v>file_name<><>


Shows the first 10 lines of a file.
@
@ first, start of, top, contents
@ show, view, get
@ head



### File - First N Lines

<cb>head -n <v>count<> <v>file_name<><>


Shows the first <c><v>count<><> lines of a file.
@
@ first, start of, top, contents
@ show, view, get
@ head, -n



### File - Last Lines

<cb>tail <v>file_name<><>


Shows the last 10 lines of a file.
@
@ last, end of, bottom, contents
@ show, view, get
@ tail



### File - Last N Lines

<cb>tail -n <v>count<> <v>file_name<><>


Shows the last <c><v>count<><> lines of a file.
@
@ last, end of, bottom, contents
@ show, view, get
@ tail, -n



### File - Line Count

<cb>wc -l <v>file_name<><>
@
@ show, view, find, get
@ wc -l



### File - Lines - Filter

<cb>| grep <v>regular_expression<><>

Usage:

<cb>cat <v>file_1<> | grep <v>regular_expression<><>


Filter the lines in a file using grep's regular expressions.


Regular Expression Syntax: <l regular_expressions>Regular Expressions SpeedSheet<>
@
@ regex, regular expressions, select
@ grep



### File - Lines - Iterate

<cb>while read -r <v>line<> ; do
	<v>...<>
done \< "$<v>file_name<>"<>


Use <c>while read<> to iterate over a file's lines.
@
@ while done, loop over, for each
@ read, -r



### File - Word Count

<cb>wc -l <v>file_name<><>
@
@ show, view, find, get
@ wc -l



### File - View

<cb>cat <v>file_name<><>


View the contents of a file.
@
@ see contents, all, entire
@ show, view, display
@ cat



### File - View, Show Line Numbers

<cb>nl <v>file_name<><>


View the contents of a file but also shows line numbers.
@
@ see contents, all, entire
@ show, view, display
@ nl



### File - View - As Hex

<cb>hexdump <v>file_name<><>

Prints out the contents of the file as hex values.
@
@ see contents, all, entire
@ show, view, get, display
@ hexdump, hex dump



### File - View Paged

<cb>more <v>file_name<><>


View the contents of a file a page at a time.


Keys:

<in 2><table><col><b>Action<>			<><col><b>Key<><>
<col> <>
<col>Page Down<><col>Space<>
<col>Page Up<><col>B<>
<col> <>
<col>Line Down<><col>Arrow Down<>
<col>Line Up<><col>Arrow Up<>
<col> <>
<col>Quit<><col>Q<><><>
@
@ see contents, keys
@ show, view, display
@ more



## File - Properties



### File - File Information

<cb>file <v>file_name<><>


Displays details on a file.

Displays if it is executable and what kind of executable.
Displays if it is text and what is the encoding.
@
@ show, view, get, information, details, type
@ kind



### File Name - Directory

<cb>dirname $<v>file_path<><>

Usage:

<cb><v>directory<>="$(dirname "$<v>file_path<>")"<>


Returns the directory portion of the file path.

Returns "." if no directory.


Example:

<cb><v>file_name<>="/usr/test/the_file.txt"

<v>directory<>="$(dirname "$<v>file_name<>")"

<#># Returns '/usr/test'<><>
@
@ get, show, view, extract, path, parts



### File Name - Extension

<cb>${<v>file_name<>##*.}<>

Usage:

<cb><v>extension<>="${<v>file_name<>##*.}"<>


Returns the file extension from a file name or file path.


Examples:

From File Name:

<cb><v>file_name<>="the_file.txt"

<v>extension<>="${<v>file_name<>##*.}"

<#># Returns 'txt'<><>

From Path:

<cb><v>file_name<>="/usr/test/the_file.txt"

<v>extension<>="${<v>file_name<>##*.}"

<#># Returns 'txt'<><>
@
@ get, show, view, extract, parts
@ extract



### File Name - Name No Directory/Path

<cb>basename "$<v>full_path<>"<>

Usage:

<cb><v>file_name<>=$(basename "$<v>full_path<>")<>


Returns the file name part of the path.


Example:

<cb><v>full_path<>="/tmp/the_file.txt"

<v>file_name<>="$(basename $<v>full_path<>)"

<#># Returns 'the_file.txt'<><>

<cb><v>full_path<>="the_file.txt"

<v>file_name<>="$(basename $<v>full_path<>)"

<#># Returns 'the_file.txt'<><>
@
@ get, show, extract, path, base name
@ extract, remove, no, without, parts



### File Name - File No Extension

<cb>${<v>file_name<>%.*}<>

Usage:

<cb><v>base_name<>="${<v>file_name<>%.*}"<>


Returns the file name without the extension.

Returns the path/directory if included.
Works even when there is no extension.


Examples:

From File Name:

<cb><v>file_name<>="the_file.txt"

<v>base_name<>="${<v>file_name<>%.*}"

<#># Returns 'the_file'<><>

From Path:

<cb><v>file_name<>="/usr/test/the_file.txt"

<v>base_name<>="${<v>file_name<>%.*}"

<#># Returns '/usr/test/the_file'<><>
@
@ get, show, view, base name
@ extract, remove, no, without, parts



### File Name - File No Extension, No Directory

<cb><v>base_name<>="$(basename "${<v>file_name<>%.*}")"<>


Returns the file name without the extension.

Works even if there is no path or extension.


Examples:

From File Name:

<cb><v>file_name<>="the_file.txt"

<v>base_name<>="$(basename "${<v>file_name<>%.*}")"

<#># Returns 'the_file'<><>

From Path:

<cb><v>file_name<>="/usr/test/the_file.txt"

<v>base_name<>="$(basename "${<v>file_name<>%.*}")"

<#># Returns 'the_file'<><>
@
@ get, show, view, base name, stem only
@ extract, remove, no, without, parts



### File Name - To Full Path

<cb>realpath <v>file_name<>


Returns the full path of the file.
@
@ expand
@ realpath



## File - Operations
@
@ file-only, files-only, files, commands



### File - Change Date or Time

<cb>touch -a -m -t <v>YYYYMMDDhhmm.ss<> <v>file_name<><>

<cb>touch -a -m -d <v>YYYY<>-<v>MM<>-<v>DD<>T<v>hh<>-<v>mm<>-<v>ss<> <v>file_name<><>


Changes the timestamp of a file.


Options:

<in 2><table><col><c>-a<><><col>Accessed Date<>
<col><c>-m<><><col>Modified Date<>
<col><c>-d<><><col>Date<>
<col><c>-t <v>format<><><><col>Timestamp<><><>


-d Format:

<in 2><t><c><v>YYYY<>-<v>MM<>-<v>DD<>T<v>hh<>-<v>mm<>-<v>ss<>	<><|><c><v>2001<>-<v>02<>-<v>03<>T<v>12<>-<v>01<>-<v>60<><><><>


-t Formats:

<in 2><table><col><c><v>YYYYMMDDhhmm.ss<>		<><><col><c><v>200102031201.60<><><>
<col><c><v>YYMMDDhhmm<><><><col><c><v>0102031201<><><>
<col><c><v>MMDDhhmm<><><><col><c><v>02031201<><><><><>
@
@ timestamp, datetime, date time, update
@ yyyy-mm-dd, hh-mm-ss, yyyymmdd, hhmmss
@ touch, -a, -m, -d, -t



### File - Change Group

<cb>chgrp <v>group_name<> <v>file_name<><>

<cb>chgrp <v>group_name<> <v>file_name<> <v>file_name<> <v>file_name<> <v>...<><>
@
@ set group
@ chgrp



### File - Change Group Recursively

<cb>chgrp -R <v>group_name<> <v>file_name<><>
@
@ set group
@ chgrp



### File - Change Owner

<cb>chown <v>user<> <v>file_name<><>

<cb>chown <v>user<> <v>file_name<> <v>file_name<> <v>file_name<> <v>...<><>
@
@ set, user
@ chown



### File - Change Owner Recursively

<cb>chown -R <v>user_name<> <v>file_name<><>
@
@ set, user
@ chown



### File - Change Permissions

<cb>chmod <v>permissions<> <v>file_name<><>


Sets the read, write, execute permissions on a file.
@
@ read, write, execute
@ chmod



### File - Change Permissions - Recursively

<cb>chmod -R <v>permissions<> <v>path<><>


Sets the read, write, execute permissions all files in a directory and it's subdirectories.
@
@ read, write, execute, directory, directories, subdirectories
@ chmod, -r



### File - Change Permissions - By Permission Numbers

<cb>chmod <v>u<><v>g<><v>o<> <v>file_name<><>

Example:

<cb>chmod <v>660<> <v>data_file.txt<><>


Set the file permission using perm numbers.

Permissions are set by a 3 digit code, each individual digits range from 0 to 7.
ugo - user, group, other (all)


Defining Permissions:

<in 2>For Each Type (user, group, other/all):
Add Read + Write + Execute Permissions (0 = no permission.)

Place in Order:
User Group, Other (ugo)<>

Permission Numbers:

<in 2><table><col><c>0-7<><><col>Permission Numbers Range From 0 to 7<>
<col> <>
<col><c>0<><><col>No Permissions<>
<col><c>1<><><col>Execute<>
<col><c>2<><><col>Write<>
<col><c>4<><><col>Read<><><>

ugo:

<in 2><table><col><c>ugo<><><col><><col>3 Digit Permission (000 - 777)
Digit Position Determines Who's Permission<>
<col> <> 
<col><c>u<><><col>Digit 1<><col>User (owner) Permission<>
<col><c>g<><><col>Digit 2<><col>Group Permission<>
<col><c>o<><><col>Digit 3<><col>Other (all) Permissions<><><>

Examples:

<in 2><table><col><c>000<><><col>No Permissions / No Access<><col><c>chmod 000 <v>file_name<><><>
<col><c>444<><><col>Read Only for Everyone<><col><c>chmod 444 <v>file_name<><><>
<col><c>600<><><col>Read and Write for User Only (owner)<><col><c>chmod 600 <v>file_name<><><>
<col><c>660<><><col>Read and Write for User and Group Only<><col><c>chmod 660 <v>file_name<><><>
<col><c>660<><><col>Full Access for User and Group Only<><col><c>chmod 660 <v>file_name<><><>
<col><c>777<><><col>Full Access for Everyone<><col><c>chmod 777 <v>file_name<><><><><>
@
@ with, using, digits
@ 000, 400, 440, 600, 660, 777
@ chmod



### File - Change Permissions - By Permission Codes

<cb>chmod <v>who<>+<v>grant<> <v>file_name<><>

<cb>chmod <v>who<>-<v>deny<> <v>file_name<><>

<cb>chmod <v>who<>+<v>grant<>-<v>deny<>,<v>who<>+<v>grant<>-<v>deny<> <v>file_name<><>

Example:

<cb>chmod ug+rw <v>data_file.txt<><>

<cb>chmod o-w <v>data_file.txt<><>


Set permission using permission codes.


Who:

<in 2><table><col><c>u<><><col>User<>
<col><c>g<><><col>Group<>
<col><c>o<><><col>Other / All<><><>

Permissions:

<in 2><table><col><c>r<><><col>Read<>
<col><c>w<><><col>Write<>
<col><c>x<><><col>Execute<><><>

Deny / Grant:

<in 2><table><col><c>-<><><col>Deny Permissions<>
<col><c>+<><><col>Grant Permissions<><><>

Examples:

<in 2><table><col><c>u+x<><><col>Execute for User Only<><col><c>chmod u+x <v>file_name<><><>
<col><c>ug+x<><><col>Execute for User, Group<><col><c>chmod ug+x <v>file_name<><><>
<col><c>ug+rw <><><col>Read Write for User, Group<><col><c>chmod ug+rw <v>file_name<><><>
<col><c>ug+rw,o-w <><><col>Read Write for User, Group; No Write for Others<><col><c>chmod ug+rw,o-w <v>file_name<><><><><>
@
@ with, using, letters
@ chmod u+, g+, o+ u-, g-, o-, ug+, ug-, +r, +w, +x, -r, -w, -x



### File - Change Permissions - Make Executable For User, Group

<cb>chmod ug+x <v>file_name<><>
@
@ chmod



### File - Change Permissions - Make Read Writable For User, Group Only, Remove Write for All

<cb>chmod ug+rw,o-w <v>file_name<><>
@
@ chmod



### File - Change Permissions - Directories Only

<cb>find <v>path<> -type d -exec chmod 755 {} +<>

or

<cb>chmod 755 $(find <v>path<> -type d)<>


Changes directory permissions only.
@
@ directory, directoryies
@ find, chmod



### File - Change Permissions - Files Only

<cb>find <v>path<> -type f -exec chmod 644 {} +<>

or

<cb>chmod 644 $(find <v>path<> -type f)<>
@
@ find, chmod



### File - Compare

<cb>diff <v>file_1<> <v>file_2<><>


Shows the difference between two files.

Differences are shown by line.
@
@ view, show, get
@ diffs, differences, files
@ diff



### File - Concatenate

<cb>cat <v>file_1<> <v>file_2<> <v>...<><>

Usage:

<cb>cat <v>file_1<> <v>file_2<> <v>...<> > <v>target_file<><>


Concatenates two or more files together.

The output is sent to the standard out.
@
@ join
@ cat



### File - Copy

<cb>cp <v>source_file<> <v>new_file<><>


Copies a file.


Options:

<in 2><table><col><c>-a<><><col>Preserve all possible attributes (timestamp, permissions, etc.)<>
<col><c>-v<><><col>Verbose mode.<><><>
@
@ duplicate, clone
@ cp, -a, -v



### File - Create - Empty File

<cb>echo -n "" > <v>file_name<><>

or

<cb>touch <v>file_name<><>


Creates an empty file.
@
@ new, to file, write, blank
@ touch



### File - Create - From Command-line

<cb>cat > <v>file_name<>
<v>...content...<>
Ctrl + D<>


Creates a file from the command-line.
@
@ to file, command line, new, write, cat, >, console
@ ctrl + d, ^d



### File - Create - From Command Output

<cb><v>command<> > <v>file_name<><>


Redirects the output of the command to a file.
@
@ to file, command line, command-line, new, write, echo >, console



### File - Create - From Script

<cb>cat > <v>file_name<> \<\< END_LABEL
<v>...content...<>
<v>...content...<>
<v>...content...<>
END_LABEL<>


Use stream literals inside your script to create a file.
@
@ to file, new, write, cat, \<\<, >, label
@ stream literal



### File - Delete

<cb>rm <v>file_name<><>


Deletes a file.
@
@ rm



### File - Find

<cb>find . -type f -name <v>file_name<><>

<cb>find <v>path<> -type f -name <v>file_name<><>


Will search the current directory or given path for files matching the file name.

Matches files only (no directories).
@
@ search for, locate path
@ -type, -name



### File - Find - With Regular Expression

<cb>grep -r "<v>match_expression<>" <v>path<><>

Search Current Directory:

<cb>grep -r "<v>match_expression<>" .<>


Recursively searches through all files in the path and lists all matches.


Match All Files With Given Extension:

<cb>grep -r --include "<v>*.rtf<>" "<v>match_expression<>" .<>
@
@ search for, regex
@ grep -r --include



### File - Find - File Names Containing Extension

<cb>egrep -ir --include=*.{<v>extension_1<>,<v>extension_2<>,<v>...<>} "(<v>match_1<>|<v>match_2<>)" <v>path<><>

<cb>egrep -ir --include=*.{<v>extension_1<>,<v>extension_2<>,<v>...<>} "(<v>match_1<>|<v>match_2<>)" .<>


Matches all files with given extensions, match strings 1 and 2.



Example:

<cb>egrep -ir --include=*.{<v>php<>,<v>html<>,<v>js<>} "(<v>document.cookie<>|<v>setcookie<>)" .<>
@
@ search for, regex
@ egrep --include



### File - Find in Path

<cb>which <v>file_name<><>


Shows the path to a file that can be found in the paths of the <c>PATH<> variable.

Use to locate the path of an executable accessible from the terminal.
If more than one match, only returns the first match.
@
@ location, path variable
@ which



### File - Link File - Copy

<cb>cp -P <v>source_link<> <v>new_link<><>


Creates a symbolic link to a source file or directory.

If you copy without the <c>-p<> option, cp will make a copy of the link's target and not the link itself.


Options:

<in 2><table><col><c>-a<><><col>Preserve all possible attributes (timestamp, permissions, etc.)<>
<col><c>-v<><><col>Verbose mode.<><><>
@
@ duplicate, clone
@ symbolic, symlink
@ cp -p



### File - Link File - Create

<cb>ln -s <v>source_path<> <v>link_name<><>


Creates a symbolic link to a source file or directory.

Options:

<in 2><table><col><c>-s<><><col>Creates a symbol link. Can link across devices.<><><>
@
@ directory, folder, new, set destination
@ symbolic, symlink
@ ln -s



### File - Link File - Show Link Target

<cb>ls -l <v>link_name<><>


Shows the target file or directory for a symbolic link.
@
@ destination
@ symbolic, symlink
@ ls -l



### File - Move

<cb>mv <v>file_name<> <v>target_directory<><>

<cb>mv <v>file_name<> <v>target_directory<>/<v>new_name<><>
@
@ to directory
@ mv



### File - Rename

<cb>mv <v>file_name<> <v>file_name<><>
@
@ mv



### File - Unlock

<cb>chflags nouchg <v>file_name<><>


Removes the lock flag on one or more files.
@
@ chflags, nouch,



### File - Unlock Recursively

<cb>chflags -R nouchg <v>path<><>


Removes the lock flag on one or more files in a path.
@
@ directory, directories
@ chflags, nouch, -r



### File - View Live Changes

<cb>tail -f <v>file_name<><>


Shows the end of the file and any additions as they come in.
@
@ file, contents, continuously
@ end, bottom, last, new, updated
@ tail, -f



### Files - Execute Command Recursively

<cb>find <v>path<> -type f -exec <v>command<> {} \;<>


Executes a command on all files in the current directory and it's subdirectories.
@
@ on subdirectories



### Files - Iterate Over

<cb>for <v>file_name<> in * ; do <v>...<> ; done<>

<cb>for <v>file_name<> in *
do
	<v>...<>
done<>

<cb>for <v>file_name<> in <v>path<>/*
do
	<v>...<>
done<>


Iterate over the files in a directory.

Iterates over all files regardless of file type.
@
@ for loop through, file names



### Files - View Latest File

<cb>tail -f $(ls -1t <v>directory_name<>/* | /bin/sed q)<>
@
@ last
@ tail, -f



## Directory - Operators
@
@ folder
@ dir-only, directory-only, directories-only
@ folder-only, folders-only
@ ops-only, operators-only, operator-only


### Directory - Exists?

<cb>-d <v>file_name<><>

Usage:

<cb>if [[ -d <v>file_name<> ]] <v>...<><>


Returns true if the directory exists and is a directory.
@
@ path, is a, has, op-only
@ -d



### Directory - Does Not Exist?

<cb>! -e <v>file_name<><>

Usage:

<cb>if [[ ! -e <v>file_name<> ]] <v>...<><>


Returns true if the directory does not exist.
@
@ path, exists, op-only
@ !, -e



### Directory - Not a Directory?

<cb>! -d <v>file_name<><>

Usage:

<cb>if [[ ! -d <v>file_name<> ]] <v>...<><>


Returns true if the directory does not exist or is not a directory.
@
@ path, not a, is not, op-only
@ -d, !



## Directory - Operations
@ 
@ dir-only, directory-only, directories-only
@ folder-only, folders-only
@ commands-only, command-only



### Directory - Change To

<cb>cd <v>path<><>
@
@ cd



### Directory - Change To Root

<cb>cd /<>
@
@ cd



### Directory - Change To User Home

<cb>cd ~<>

or

<cb>cd<>
@
@ cd



### Directory - Copy

<cb>cp -r <v>source_directory<> <v>target_directory<><>


Copies a directory to another directory.

If target directory exists, cp will create a new directory under it.


Options:

<in 2><table><col><c>-a<><><col>Preserve all possible attributes (timestamp, permissions, etc.)<>
<col><c>-r<><><col>Copy a directory recursively<>
<col><c>-v<><><col>Verbose mode.<><><>
@
@ cp, ditto, -r



### Directory - Copy With ditto (Mac Only)

<cb>ditto <v>source_directory<> <v>target_directory<><>


Copies a directory to another directory.


<c>ditto<> will merge new changes into <c><v>target_directory<><> or create it if it does not exist.
@
@ ditto, -r



### Directory - Create

<cb>mkdir <v>directory<><>


Creates a directory.
@
@ new, make
@ mkdir



### Directory - Create Complete With Subdirectories

<cb>mkdir -p <v>directory<>/<v>directory<>/<v>directory<><>

Creates all missing intermediate directories as needed.
@
@ new, make, recursively,
@ mkdir -p



### Directory - Delete Empty

<cb>rmdir <v>directory_name<><>


Deletes an empty directory.
@
@ rmdir



### Directory - Delete Non-Empty

<cb>rm -rf <v>directory_name<><>


Deletes a directory.

Deletes the directory even if there are files or subdirectories present

Options:

<in 2><table><col><c>-f<><><col>Don't Prompt<>
<col><c>-r<><><col>Recursive<><><>
@
@ with files, containing
@ rm, -r, -f



### Directory - Find

<cb>find . -type d -name <v>directory_name<><>

<cb>find <v>path<> -type d -name <v>directory_name<><>


Will search the current directory or given path for directories matching the directory name.
@
@ search for
@ -type, -name



### Directory - List

<cb>ls<>

<cb>ls -al<>

Options:

	<c>-1<>		1 Per Line (default is in columns)
	<c>-a<>		Show All (includes ., hidden files)
	<c>-l<>		Long format
	<c>-r<>		Reverse
	<c>-R<>		Include Subdirectories
	<c>-s<>		Sort By Size
	<c>-t<>		Sort By Time


Default:

	List Names Only
	In Columns
	By Name (Case Sensitive)


Include:

	All, Hidden			<c>-a<>
	Subdirectories			<c>-R<>

Display:

	1 Per Line			<c>-1<>
	Long Format			<c>-l<>

Sort By:

	Reverse				<c>-r<>

	Name				(Default, Case Sensitive)
	Size					<c>-s<>

	Time / Last Modified	<c>-t<>

@
@ show, view, files
@ ls, -1, -a, -l, -r, -s, -t



### Directory - List - Names Only, 1 Per Line

<cb>ls -1<>

Include All:

<cb>ls -1a<>
@
@ show, view, files, simple
@ ls



### Directory - List - Sort By Name, Ignore Case

<cb>ls -1 | sort -f<>

Include All:

<cb>ls -1a | sort -f<>


Sort Long Format Directory Listing?:

<!>Nope<>. Doesn't work using <c>sort<> because <b>file permissions<> are <b>displayed before names<>.
@
@ show, view, files, alphabetically
@ ls, -1, -f, sort



### Directory - List - Sort By Size

<cb>ls -s<>

Include All, Long Format:

<cb>ls -als<>
@
@ show, view, files
@ ls, -a, -l, -s



### Directory - List - Sort By Time

<cb>ls -t<>

Reverse Order:

<cb>ls -rt<>

Include All, Long Format:

<cb>ls -alt<>


Lists by last modified time.
@
@ show, view, files
@ ls, -r, -t, -a



### Directory - List - With Subdirectories

<cb>ls -R <v>...<><>
@
@ With, Plus, Include, recursively
@ show, view, files
@ ls, -r



### Directory - List - Color On

<cb>ls --color=tty<>

Turns on name colors.
@
@ colors, colours
@ show, view, files
@ ls, --color, tty



### Directory - List - Color Off

<cb>ls --color=none<>

Turns off name colors.
@
@ show, view, files
@ colors, colours
@ ls, --color, none



### Directory - List - To File

<cb>ls -1 > <v>file_names.txt<><>

Include All:

<cb>ls -1a > <v>file_names.txt<><>

Prints just the names in a list.
@
@ show, view, files
@ save, write
@ ls



### Directory - Mirror

<cb>rsync -avE --delete <v>source_directory<>/ <v>target_parent_directory<>/<>


Use rsync to mirror a directory.

Requires: rsync
@
@ duplicate, clone
@ rsync



### Directory - Move

<cb>mv <v>directory_name<> <v>target_directory<><>

<cb>mv <v>directory_name<> <v>target_directory<>/<v>new_name<><>
@
@ to
@ mv



### Directory - Rename

<cb>mv <v>directory_name<> <v>new_name<><>
@
@ mv



### Directory - Show Current Directory - Path

<cb>pwd<>


Returns the full path of the current directory.


pwd = Print Working Directory.
@
@ get, view, path, working
@ pwd



### Directory - Show Current Directory - Name Only

<cb>basename "$(pwd)"<>


Returns the directory name for the current directory.


pwd = Print Working Directory.
@
@ get, view, path, working
@ pwd, basename



### Directory - Show File Count

<cb>ls | wc -l

ls <v>path<> | wc -l<>


Returns the number of files and directories in a directory.

Does not include files in subdirectories.
@
@ view, get
@ ls, wc -l



### Directory - Show File Count - Include Subdirectories

<cb>ls -R | wc -l

ls -R <v>path<> | wc -l<>


Returns the number of files in a directory and all its subdirectories.
@
@ view, get
@ including
@ ls -R, wc -l



### Directory - Show Parent Path

<cb>dirname <v>directory_path<><>


Removes the directory name from the path, returning the full path to the parent.

Requires the full path as a parameter.
Will NOT work with '.' dot directory (current directory).


To Save To Variable:

<cb><v>PARENT_DIR<>="$(dirname <v>path<>)"<>

<cb><v>PARENT_DIR<>="$(dirname "$<v>CURRENT_DIRECTORY<>")"<>


Example:

<cb>dirname <v>/home/user/documents<>

<#># Returns: /home/user<><>
@
@ view, get
@ dirname



### Directory - Show Parent Path - From Current Directory

<cb>dirname "$(pwd)"<>


Returns the path to the parent of the current directory.
@
@ view, get
@ dirname



### Directory - Show Size

<cb>du -sh <v>directory<><>

For Current Directory:

<cb>du -sh .<>

Returns the size of the directory.

Includes all files and subdirectories.
@
@ get, view
@ du, -s, -h




### Directories - Compare


<cb>diff -rq <v>directory_1<> <v>directory_2<> <>


Compares two directories and shows differences.

Shows files in one but not another.
Shows files that are different.


Extra - Filtered View:

<cb>diff <v>...<> | grep -v '\:\s\._' > <v>output_file<><>
@
@ diff, -r, -q



### Directories - Iterate Over

Current Directories:

<cb>for <v>directory_name<> in */ ; do <v>...<> ; done<>

<cb>for <v>directory_name<> in */
do
	<v>...<>
done<>

Directories in Path:

<cb>for <v>directory_name<> in <v>path<>/*/
do
	<v>...<>
done<>


Add a forward slash '<c>/<>' to the match '<c>*<>' to retrieve the directory names.
@
@ for loop through, directory names



### Directories - Show Sizes

<cb>du<>

<cb>du -h <v>directory_path<><>


Lists all directories and their sizes.


Options:

<in 2><table><col><c>-h<><><col>Lists summary info.<>
<col><c>-k<><><col>List sizes in Kilobytes.<>
<col><c>-ks<><><col>List using the size for each file.<><><>


Example:

<cb>du -k | sort -rn | head<>	
@
@ get, view, list
@ du, -h, -k, -s



# Date
@ 
@ dates-only, date-only, time


### Date - Show

<cb>date<>

Example:

<cb>date

<#># Prints: Tue Jan 2 12:01:02 EDT 2001<>



### Date - Show Formatted Date

<cb>date [+"<v>format<>"]<>

Format Codes:

<in 2><table><col><c>%a<><><col>Day Name, 3 Char<>
<col><c>%A<><><col>Day Name, Full<>
<col><c>%b<><><col>Month Name, 3 Char<>
<col><c>%B<><><col>Month Name, Full<>
<col><c>%d<><><col>Date of Month, 2 Digit<>
<col><c>%F<><><col>YYYY-MM-DD<>
<col><c>%H<><><col>Hour, 00..23<>
<col><c>%j<><><col>Day of Year, 3 Digit<>
<col><c>%l<><><col>Hour, 1..12<>
<col><c>%M<><><col>Minute, 2 Digit<>
<col><c>%m<><><col>Month, 2 Digit<>
<col><c>%s<><><col>Seconds since 1970-01-01 00:00:00<>
<col><c>%S<><><col>Seconds, 2 Digit<>
<col><c>%t<><><col>Tab<>
<col><c>%U<><><col>Week of Year<>
<col><c>%V<><><col>Week of Month, 2 Digit<>
<col><c>%y<><><col>Year, 2 Digit<>
<col><c>%Y<><><col>Year, 4 Digit<>
<col><c>%Z<><><col>Time Zone<>
<col><c>%z<><><col>Time Zone Offset from UTC<><><>

Format Options:

<in 2><table><col>Date of Month, 2 Digit<><col><c>%d<><>
<col>Day Name, 3 Char<><col><c>%a<><>
<col>Day Name, Full<><col><c>%A<><>
<col>Day of Year, 3 Digit<><col><c>%j<><>
<col>Hour, 00..23<><col><c>%H<><>
<col>Hour, 1..12<><col><c>%l<><>
<col>Minute, 2 Digit<><col><c>%M<><>
<col>Month Name, 3 Char<><col><c>%b<><>
<col>Month Name, Full<><col><c>%B<><>
<col>Month, 2 Digit<><col><c>%m<><>
<col>Seconds since 1970-01-01 00:00:00<><col><c>%s<><>
<col>Seconds, 2 Digit<><col><c>%S<><>
<col>Tab<><col><c>%t<><>
<col>Time Zone<><col><c>%Z<><>
<col>Week of Month, 2 Digit<><col><c>%V<><>
<col>Week of Year<><col><c>%U<><>
<col>Year, 2 Digit<><col><c>%y<><>
<col>Year, 4 Digit<><col><c>%Y<><>
<col>YYYY-MM-DD<><col><c>%F<><><><>
@
@ print, view, display
@ %a, %b, %b, %d, %f, %j, %h, %l, %m, %s, %s, %t, %v, %y, %u, %z
@ hours, minutes, seconds, days, weeks, months, years



### Date - Show YYYY-MM-DD

<cb>date +"%F"<>

<cb>date +"%Y-%m-%d"<>


Displays the date in YYYY-MM-DD format.


Example:

<cb>date +"%Y-%m-%d"

2001-01-02<>
@
@ +"%Y-%m-%d", %y, %m, %d, %f
@ day, months, years



### Date - Show YYYY-MM-DD HH:MM:SS

<cb>date +"%Y-%m-%d %H:%M:%S"<>


Displays the date in the format YYYY-MM-DD HH:MM:SS.


Example:

<cb>date +"%Y-%m-%d %H:%M:%S"

<#># Prints: 2001-01-02 12:01:02<><>
@
@ +"%Y-%m-%d", %y, %m, %d, %h, %m, %s
@ hours, minutes, seconds, days, months, years



### Time - Measure Execution Time

<cb>time <v>command<><>


Measures how long a command takes to run.

Shows time in 100s of a second.
Displays cpu time.
Results are shown at the bottom.


Example:

<cb>time ls<>
@
@ cpu, run, command, script, record
@ time-only



### Time - Show

<cb>date +"%H:%M:%S"<>


Shows hours, minutes and seconds.


Example:

<cb>date +"%H:%M:%S"

<#># Prints: 12:01:02<><>
@
@ view, get, display the time
@ +"%H:%M:%S", %h, %m, %s
@ hours, minutes, seconds, hh:mm:ss
@ time-only



### Time Zone - Show

<cb>date +"%Z"<>


Shows the server's time zoned.


Example:

<cb>date +"%Z"

<#># Prints: EST<><>
@
@ view, get, display, timezone, time-zone, my



### Time Zone - Show UTC Offset

<cb>date +"%z"<>


Example:

<cb>date +"%z"

<#># Prints: -0500<><>
@
@ view, get, display, timezone, time-zone, hours, minutes



### Time Zone - Set

For AWS Linux:

Pick Time Zone (time zone folder):

<cb>/usr/share/zoneinfo/<>

Examples:

<cb>/usr/share/zoneinfo/UTC
/usr/share/zoneinfo/America/New_York<>

Update Clock File:

<cb>sudo vi /etc/sysconfig/clock<>

Set Time Zone:

<cb>ZONE="<v>America/New_York<>"<>

Copy Time Zone to Localtime:

<cb>sudo ln -sf /usr/share/zoneinfo/<v>America/New_York<> /etc/localtime<>
@
@ time-zone, timezone, zoneinfo, localtime



# Named Pipes

A named pipe is a special file that allows for processes to communicate between each other (inter-process communication).

The processes can run in different memory spaces.
Communications are processed first in, first out.

Also Called: FIFO (first in first out)
@
@ named-pipe, fifo, ipc



### Named Pipe - Create

<cb>mkfifo <v>pipe_name<><>


Creates a named pipe.

The pipe is created as a file in the current directory.
@
@ mkfifo



### Named Pipe - Delete	

<cb>rm <v>pipe_name<><>

Deletes a pipe.
@
@ rm



### Named Pipe - Receive Input

<cb><v>...<> \< <v>pipe_name<><>


Example:

<cb>cat \< <v>pipe-1<><>
@
@ from



### Named Pipe - Send Output

<cb><v>...<> > <v>pipe_file_name<><>


Example:

<cb>echo "Send this to the pipe" > <v>pipe-1<><>
@
@ to



### Named Pipe - Example

Run from the same directory:


Terminal 1 - Create and Listen:

<cb>mkfifo <v>pipe-1<>
cat \< <v>pipe-1<><>

Terminal 2 - Send:

<cb>cat > <v>pipe-1<>
Send this over the pipe.
CTRL + D<>

Cleanup:

<cb>rm <v>pipe-1<><>



# Printing
@
@ echo-only, print-only, printing-only



### Echo

<cb>echo <v>Text to print<><>

<cb>echo "<v>Your text here.<>"<>

<cb>echo $<v>VARIABLE_1<><>


Prints a line to the terminal or standard out.



### Echo - Clear Line

<cb>echo -ne '\\033[2K'<>


Clears the current line.
@
@ print, \\033[2K



### Echo - Beep

<cb>echo -e "\\a"<>


Makes an audible beep.
@
@ play sound, audio



### Echo - Print On Same Line

<cb>echo -n <v>text<><>

<cb>echo -ne <v>text<> '\\r'<>


Prints the text but does not move to a new line.

\\r Places the cursor back at the start of the line.


Example:

<cb>for ((<v>value<>=0; <v>value<> < 15; <v>value<>++));
do
	echo -ne $<v>value<> '\\r'
	sleep 0.5
done

echo
echo 'Done.'<>
@
@ no newline, nl
@ echo, -n, -r, \\r



### Echo - Print to StdErr

<cb>echo <v>...<> >&2<>


Prints to the standard error.


<t><c>>&<><|>Redirect to a File Descriptor
<c>2<><|>StdErr Descriptor<>
@
@ standard error, >&2 2



### Print - Formatted

<cb>printf '<v>line to be printed<> %s %-20s <v>... \n<>' <v>string1<> <v>string2<><v>...<><>


Formats and prints a line.


<table><col><c>%s<>		<><col>Print string.<>
<col><c>%10s<><><col>Print 10 chars long, pad with spaces, right align.<>
<col><c>%-10s<><><col>Print 10 chars long, pad with spaces, left align.<>
<col><c>/n<><><col>New line. By default = no new line.<><>



### Print - Nothing

<cb><v>command<> > /dev/null<>


Prints nothing by redirecting output to null.
@
@ to null, don't print, echo, output
@ /dev/null



# Printing In Color
@
@ color-only, colors-only, colour-only, colours-only, echo


### Color - ANSI Color - Set Color

<cb>echo -e "\\e[<v>color<>m"<>

Or

<cb>echo -e "\\033[<v>color<>m"<>

Or

<cb>echo -e "\\x1B[<v>color<>m"<>


Prints the text in the given colors.

Uses ANSI color escape values.
Colors range in value from 0 to 107


Examples:

Red:

<cb>echo -e "\\e[<v>031<>m Prints In Red\\e[<v>0<>m"<>

Red on Dark Gray:

<cb>echo -e "\\e[<v>031<>m\\e[<v>100<>m Prints Red on Dark Gray\\e[<v>0<>m"<>
@
@ colors, colours, escapes, echo -e


### Color - ANSI Color - Set Color Without Printing

<cb>echo -en "\\e[<v>color<>m"<>

Or

<cb>echo -en "\\033[<v>color<>m"<>

Or

<cb>echo -en "\\x1B[<v>color<>m"<>


Prints the text in the given colors.

Does not print any text.
Everything printed after this will be in the set color.


Example:

<cb>echo -en "\\e[<v>031<>m"
echo "Prints In Red"
echo -en "\\e[<v>0<>m"<>
@
@ colors, colours, escapes, echo -e -n, -en



### Color - ANSI Color - Reset Color

<cb>echo -e "\\e[<v>0<>m\\e[<v>49<>m"<>

Or

<cb>echo -e "\\033[<v>0<>m\\033[<v>49<>m"<>

Or

<cb>echo -e "\\x1B[<v>0<>m\\x1B[<v>49<>m"<>


Resets the foreground and background to the default colors.

Default Foreground Color = 0
Default Background Color = 49


Example:

<cb>echo -e "\\e[<v>031<>m Red \\e[<v>0<>m Back to Normal"<>
@
@ colors, colours, echo -e



### Color - ANSI Color - Reset Color Without Printing

<cb>echo -en "\\e[<v>0<>m\\e[<v>49<>m"<>

Or

<cb>echo -en "\\033[<v>0<>m\\033[<v>49<>m"<>

Or

<cb>echo -en "\\x1B[<v>0<>m\\x1B[<v>49<>m"<>


Resets the foreground and background to the default colors.

Does not print text or even a newline.
Everything after this will be printed in the default colors.

Default Foreground Color = 0
Default Background Color = 49


Example:

<cb>echo -en "\\e[<v>031<>m"
echo "Prints In Red"
echo -en "\\e[<v>0<>m"<>
@
@ colors, colours, echo -e -n, -en



### Color - ANSI Color Code Table - Color To Code

<cb>\\e[<v>color_code<>m<>

Special Codes:

<in 2><table><col>Default Color<><col>0<>
<col>Default Background<><col>49<><><>

Foreground:

<in 2><table><col>Black			<><col>30<>
<col>Dark Gray<><col>90<>
<col>Light Gray<><col>37<>
<col>White<><col>97<>
<col> <>
<col>Blue<><col>34<>
<col>Cyan<><col>36<>
<col>Green<><col>32<>
<col>Purple<><col>35<>
<col>Red<><col>31<>
<col>Yellow<><col>33<>
<col> <>
<col>Light Blue<><col>94<>
<col>Light Cyan<><col>96<>
<col>Light Green<><col>92<>
<col>Light Purple<><col>95<>
<col>Light Red<><col>91<>
<col>Light Yellow<><col>93<><><>

Background:

<in 2><table><col>Black			<><col>40<>
<col>Dark Gray<><col>100<>
<col>Light Gray<><col>47<>
<col>White<><col>107<>
<col> <>
<col>Blue<><col>44<>
<col>Cyan<><col>46<>
<col>Green<><col>42<>
<col>Purple<><col>45<>
<col>Red<><col>41<>
<col>Yellow<><col>43<>
<col> <>
<col>Light Blue<><col>104<>
<col>Light Cyan<><col>106<>
<col>Light Green<><col>102<>
<col>Light Yellow<><col>103<>
<col>Light Purple<><col>105<>
<col>Light Red<><col>101<>
<col>Light Yellow<><col>103<><><>

Style:

<in 2><table><col>Bold				<><col>1<>
<col>Blink<><col>5<>
<col>Dimmed<><col>2<>
<col>Italic<><col>3<>
<col>Reversed<><col>7<>
<col>Strikethrough<><col>9<>
<col>Underline<><col>4<><><>
@
@ colors, colours, name, chart
@ print, show, reference, foreground, background
@ Bold, Blink, Dimmed, Italic, Reversed, Strikethrough, Underline



### Color - ANSI Color Code Table - Code to Color

<cb>\\e[<v>color_code<>m<>


Special:

<in 2><table><col>0				<><col>Default Foreground<>
<col>4<><col>Underline<>
<col>49<><col>Default Background<><><>

Foreground:

<in 2><table><col>30				<><col>Black<>
<col>31<><col>Red<>
<col>32<><col>Green<>
<col>33<><col>Yellow<>
<col>34<><col>Blue<>
<col>35<><col>Purple<>
<col>36<><col>Cyan<>
<col>37<><col>Light Gray<>
<col>90<><col>Dark Gray<>
<col>91<><col>Light Red<>
<col>92<><col>Light Green<>
<col>93<><col>Light Yellow<>
<col>94<><col>Light Blue<>
<col>95<><col>Light Purple<>
<col>96<><col>Light Cyan<>
<col>97<><col>White<><><>

Background:

<in 2><table><col>40				<><col>Black<>
<col>41<><col>Red<>
<col>42<><col>Green<>
<col>43<><col>Yellow<>
<col>44<><col>Blue<>
<col>45<><col>Purple<>
<col>46<><col>Cyan<>
<col>47<><col>Light Gray<>
<col>100<><col>Dark Gray<>
<col>101<><col>Light Red<>
<col>102<><col>Light Green<>
<col>103<><col>Light Yellow<>
<col>104<><col>Light Blue<>
<col>105<><col>Light Purple<>
<col>106<><col>Light Cyan<>
<col>107<><col>White<><><>
@
@ colors, colours, name, chart
@ print, show, reference, foreground, background



### Color - Color Codes as Variables

<cb><#># Special Colors ───────────────────── #<>

<v>DEFAULT_COLOR<>='\\e[0m'
<v>DEFAULT_BACKGROUND<>='\\e[49m'
<v>RESET_COLOR<>='${DEFAULT_COLOR}${DEFAULT_BACKGROUND}'
<v>RESET<>=$<v>RESET_COLOR<>

<#># Foreground ───────────────────────── #<>

<v>BLACK<>='\\e[30m'
<v>DARK_GRAY<>='\\e[90m'
<v>DARK_GREY<>='\\e[90m'
<v>LIGHT_GRAY<>='\\e[37m'
<v>LIGHT_GREY<>='\\e[37m'
<v>WHITE<>='\\e[97m'
<v>BLUE<>='\\e[34m'
<v>CYAN<>='\\e[36m'
<v>GREEN<>='\\e[32m'
<v>PURPLE<>='\\e[35m'
<v>MAGENTA<>='\\e[35m'
<v>RED<>='\\e[31m'
<v>YELLOW<>='\\e[33m'
<v>LIGHT_BLUE<>='\\e[94m'
<v>LIGHT_CYAN<>='\\e[96m'
<v>LIGHT_GREEN<>='\\e[92m'
<v>LIGHT_PURPLE<>='\\e[95m'
<v>LIGHT_MAGENTA<>='\\e[95m'
<v>LIGHT_RED<>='\\e[91m'
<v>LIGHT_YELLOW<>='\\e[93m'

<#># Background ───────────────────────── #<>

<v>ON_BLACK<>='\\e[40m'
<v>ON_DARK_GRAY<>='\\e[100m'
<v>ON_DARK_GREY<>='\\e[100m'
<v>ON_LIGHT_GRAY<>='\\e[47m'
<v>ON_LIGHT_GREY<>='\\e[47m'
<v>ON_WHITE<>='\\e[107m'
<v>ON_BLUE<>='\\e[44m'
<v>ON_CYAN<>='\\e[46m'
<v>ON_GREEN<>='\\e[42m'
<v>ON_PURPLE<>='\\e[45m'
<v>ON_MAGENTA<>='\\e[45m'
<v>ON_RED<>='\\e[41m'
<v>ON_YELLOW<>='\\e[43m'
<v>ON_LIGHT_BLUE<>='\\e[104m'
<v>ON_LIGHT_CYAN<>='\\e[106m'
<v>ON_LIGHT_GREEN<>='\\e[102m'
<v>ON_LIGHT_YELLOW<>='\\e[103m'
<v>ON_LIGHT_PURPLE<>='\\e[105m'
<v>ON_LIGHT_MAGENTA<>='\\e[105m'
<v>ON_LIGHT_RED<>='\\e[101m'
<v>ON_LIGHT_YELLOW<>='\\e[103m'

<#># Styles ───────────────────────────── #<>

<v>BOLD<>='\\e[1m'
<v>BLINK<>='\\e[5m'
<v>DIMMED<>='\\e[2m'
<v>ITALIC<>='\\e[3m'
<v>REVERSED<>='\\e[7m'
<v>STRIKETHROUGH<>='\\e[9m'
<v>UNDERLINE<>='\\e[4m'<>



### Color - XTerm Color - Set Color

<cb>echo "'\\e[38;5;<v>ansi_color_code<>m'"<>
@
@ colors, colours




### Color - XTerm Color - Set Background Color

<cb>echo "'\\e[48;5;<v>ansi_color_code<>m'"<>
@
@ colors, colours




### Color - XTerm Colors - See All

<cb>for((i=16; i\<256; i++)); do
    printf "\\e[48;5;${i}m%03d" $i;
    printf '\\e[0m';
    [ ! $((($i - 15) % 6)) -eq 0 ] && printf ' ' || printf '\n'
done<>


Displays a chart of all available colors.


Full Chart:
<l>https://www.ditig.com/256-colors-cheat-sheet<>
@
@ colors, colours



# Processes
@
@ process-only, processes-only


## Process - Commands


### Process Commands - Basics

<table><col>Kill<><col><c>kill <v>process_id<><><>
<col>Kill - Force<><col><c>kill -9 <v>process_id<><><>
<col>Kill by Name<><col><c>pkill <v>app_name<><><>
<col>Kill by Regex<><col><c>pkill -f '<v>regex expression<>'<><>
<col> <>
<col>List<><col><c>ps<><>
<col>List with Full Name<><col><c>ps -ef<><>
<col>List by Name<><col><c>pgrep <v>app_name<><><>
<col>List by Regex<><col><c>pgrep -lf '<v>name<>'<><>
<col> <>
<col>List by Top CPU<><col><c>top<><>
<col>List by Top Memory<><col><c>top -a<><>
<col> <>
<col>Run in Background<><col><c><v>command<> &<><>
<col>Run / No Hangup<><col><c>nohup <v>command<> &<><>
<col> <>
<col>Suspend<><col><c>kill -STOP <v>process_id<><><>
<col>Restart / Continue<><col><c>kill -CONT <v>process_id<><><><>
@
@ summary



### Process - Kill

<cb>kill <v>process_id<><>


Terminates a process.

Sends a terminate signal to the process.
If the process is locked, the process may not terminate.
@
@ by process id, pid
@ end, stop, terminate



### Process - Kill - Force

<cb>kill -9 <v>process_id<><>


Forces a process to terminate.
@
@ end, stop, terminate
@ by process id, pid
@ -9



### Process - Kill By Name

<cb>pkill <v>app_name<><>

Using Regular Expression:

<cb>pkill -f '<v>regex expression<>'<>


Kills a process by the process name or command.


Options:

<in 2><table><col><c>-f<><><col>Match against full argument list, instead of just name.<>
<col><c>-i<><><col>Ignore Case<><><>
@
@ grep, regular expression
@ pkill, -f, -i



### Process - Restart / Continue

<cb>kill -CONT <v>process_id<><>


Restarts a suspended process.
@
@ by process id, pid
@ kill -cont



### Process - Send to Background

2 Steps

Suspend:

<cb>kill -STOP <v>process_id<><>

Restart in Background:

<cb>kill -CONT <v>process_id<><>
@
@ put, run in
@ kill, -cont, -stop



### Process - Start In Background

<cb><v>command<> &<>

Runs the command in the background.
@
@ run, &



### Process - Start In Background / Continue After Logout

<cb>nohup <v>command<> &<>

Runs the command in the background.

Continues to run the command even if the user logs out.
@
@ run, nohup, &



### Process - Suspend

<cb>kill -STOP <v>process_id<><>


Suspends a running process.
@
@ by process id, pid, stop, pause
@ kill -stop



### Process - Memory Used, Locations

<cb>pmap -d <v>process_id<><>


Lists all memory used by a process.


<table><col>Mapped:<><col>total amount of memory mapped to files.<>
<col>Writeable/Private<><col>amount of private address space.<>
<col>Shared:<><col>amount of address space the process is sharing with others.<><>
@
@ see, show, view, display
@ by process id, pid
@ pmap -d



### Processes - CPU, Memory, Stats - By CPU

<cb>ps -eo pid,%cpu,%mem,vsize,start,args | sort -k 2 -nr | head -25<>


Shows the top 25 processes by CPU usage.

Shows: Process ID, CPU %, Memory, Virtual Memory Size, Start Date, Command-line
@
@ show, view, see, display
@ ps



### Processes - CPU, Memory, Stats - By Memory

<cb>ps -eo pid,%cpu,%mem,vsize,start,args | sort -k 4 -nr | head -25<>


Shows the top 25 processes by memory size.

Shows: Process ID, CPU %, Memory, Virtual Memory Size, Start Date, Command-line
@
@ show, view, see, display
@ ps



### Processes - List

<cb>ps<>

Show running processes.

Options:

<in><table><col><c>-e<> <><col>List Every process.<>
<col><c>-f<> <><col>Full format. Lists lots of items.<>
<col><c>-p <v>id<><> <><col>Show for process id.<>
<col><c>-o <v>field1<>,<v>field2<>,<v>...<><> <><col>Display process fields<>
<col><c>-u <v>username<><> <><col>List jobs for that user only.<><><>

Fields:

<in><table><col>comm<><col>Command<>
<col>ruser<><col>User Name<>
<col>pid<><col>Process ID<>
<col>s<><col>Process State<>
<col>time<><col>CPU Time (cumulative)<>
<col>uid<><col>User ID<>
<col>vsz<><col>Virtual Memory Size<><><>


Examples:

Shows All Programs With Their Full Command-lines:

<cb>ps -ef<>

Match ID, Show User Id, PID, State Command, etc.:

<cb>ps -o ruser,pid,vsz,s,uid,comm -p <v>id<><>

Show all processes. Show user, process id, process state, start time, execute time, command:

<cb>ps -e -o ruser,pid,s,vsz,stime,time,comm<>
@
@ get, view, show, display



### Processes - List - Match By Name

<cb>pgrep -lf '<v>name<>'<>

<cb>pgrep -lf '<v>regular_expression<>'<>


Options:

<in><table><col><c>-f<><><col>Match against full argument list.<>
<col><c>-l<><><col>Long Format<><><>


Example:

<cb>pgrep -lf '<v>java .*Cassandra<>'<>
@
@ show, view, get, display, grep, regular expression
@ pgrep
@
@ get, view, show, display



### Processes - List - Top By CPU Usage

<cb>top<>

Lists the top apps by CPU usage (default).
@
@ show, view, get, display
@ top



### Processes - List - Top By Memory Usage

<cb>top -a<>

Lists the top apps by memory usage.
@
@ show, view, get, display
@ top



## Process - Find
@
@ search, get, show, view, display


### Process - Find

<cb>pgrep <v>name<><>

<cb>pgrep <v>regular_expression<><>


Returns processes that match the given name.

pgrep = process grep.
pgrep uses full regular expressions.


Options:

<in 2><table><col>-a<><col>List Full Command-line (Linux)<>
<col><><col>Include Process Ancestors (Mac)<>
<col>-f<><col>Match Against Full Argument List (defaults to process name only)<>
<col>-i<><col>Ignore Case<super><#>1<><><>
<col>-l<><col>Long Output (lists name)<><><>

Notes:

1 - Not supported by all forms of Linux
1 - Supported by MacOS


Regular Expression Syntax: <l regular_expressions>Regular Expressions SpeedSheet<>
@
@ regex, regular expressions
@ pgrep, -a, -f, -i, -l



### Process - Find - Show Full Command-line

<cb>pgrep -fl <v>...<><>

<cb>pgrep -a <v>...<>		<#>#1<><>


Shows the full command-line for the matching process.

Does a partial match when matching process command-lines.


Options:

<in 2><table><col>-a<><col>Show Full Command-line (not always supported)<>
<col>-f<><col>Match Against Full Argument List (defaults to process name only)<>
<col>-l<><col>Long Output (lists name)<><><>


Notes:

<in 2><#>#1<>	- <c>-a<> ... See Next:
-a	- Not supported on all versions of Linux.
-lf	- Use this if -a is not supported. Why does this work? No idea.<>
@
@ pgrep, -i, -f, -l



### Process - Find ID - By Name

<cb>pgrep <v>app_name<><>

Using Regular Expression:

<cb>pgrep <v>regex_expression<><>


Finds a process id by matching its name.

This is the default match operation (no options).


Example:

<cb>pgrep '<v>java<>'<>
@
@ regex, regular expressions
@ pgrep
@ pid



### Process - Find ID - By Command-line

Show ID Only:

<cb>pgrep -f <v>match<><>

Show ID and Name:

<cb>pgrep -fl <v>match<><>


Shows all matching processes with the matching regex in their command-line commands.


Options:

<in 2><table><col>-f<><col>Match Against Full Argument List (defaults to process name only)<>
<col>-l<><col>Long Output (lists name)<><><>


Regular Expression Syntax: <l regular_expressions>Regular Expressions SpeedSheet<>
@
@ regex, regular expressions
@ pgrep



### Process - Find ID - Filter With Grep

<cb>ps -ef | grep '<v>match_expression<>' | awk '{print $2}'<>


Returns the id of a process by matching its command-line with a regular expression.

Column 2 contains the process id.


Example - Find Java Processes:

<cb>ps -ef | grep '<v>[j]ava<>' | awk '{print $2}'<>


Regular Expression Syntax: <l regular_expressions>Regular Expressions SpeedSheet<>
@
@ get, grep, ps, awk, -e, -f
@ regex, pid



## Process Job
@
@ job-only, jobs-only


### Process Job - Kill

<cb>kill <v>job_number<><>
@
@ kill



### Process Job - Restart To Background

<cb>bg <v>job_number<><>


Continues a suspended job in the background.
@
@ continue, run
@ bg



### Process Job - Restart To Foreground

<cb>fg <v>job_number<><>


Continues a suspended job in the foreground.
@
@ continue, run
@ fg



### Process Job - Send to Background

3 Steps:

Run Command Normally From the Terminal:

<cb><v>command<><>

Suspend Job:

<cb>Ctrl + Z<>

Continue in the Background:

<cb>bg <v>job_number<><>
@
@ run in



### Process Job - Suspend

<cb>ctrl + z<>

Suspends the running foreground job.
@
@ foreground
@ control, ctrl, z, ^z



### Process Jobs - List

<cb>jobs<>

List With Process ID:

<cb>jobs -l<>


Lists all terminal jobs.
@
@ jobs, -l



# Users
@
@ user-only, users-only


### User - Create

<cb>adduser <v>user_name<><>

<cb>adduser -g <v>group_name<> <v>user_name<><>

Create a new user.

Options:

<in 2><table><col><c>-g <v>group_name<><><><col>Add to group<>
<col><c>-s <v>shell_name<><><><col>Set user shell '/usr/bash' | '/usr/false'<><><>
@
@ add, new
@ adduser, -g, -s



### User - Delete

<cb>userdel -r <v>user_name<><>


Deletes a user.


Options:

<in 2><table><col><c>-f<><><col>Force even if the user is logged in.<>
<col><c>-r<><><col>Remove user's home directory.<><><>
@
@ remove
@ userdel, -r, -f



### User - Get Current Id

<cb>id -u<>


Shows the current user id (a number).
@
@ get, show, view, my, user id, 
@ id, -u



### User - Get Current Id, Name, Groups

<cb>id<>


Shows information about the current user including user id, name, associated group ids and names.
@
@ get, show, view, my, user id, 
@ id



### User - Get Current Name

<cb>logname<>


Shows the current user name.
@
@ get, show, view, my
@ logname



### User - Get Current Name (Environment Variable)

<cb>$USER<>


Shows the current user name using the environment variable <c>$USER<>.


Example:

<cb>echo "$USER"<>
@
@ get, show, view, environment variable, my
@ $USER



### User - Group - Add To

<cb>usermod -aG <v>group_name<> <v>user_name<><>


Adds a user to a group.

You can add users to multiple groups this way.
@
@ new, other
@ usermod, -a, -G



### User - Group - Delete From

<cb>gpasswd -d <v>user_name<> <v>group_name<><>

<cb>usermod -G <v>group_name<> <v>user_name<><>


Removes a user from a user group.

These commands are equivalent.
@
@ remove
@ usermod, -G
@ gpasswd, -d



### User - Group - Update

<cb>usermod -g <v>group_name<> <v>user_name<><>


Changes the group a user is assigned to.
@
@ usermod



### User - Groups - View

<cb>groups<>


Lists the groups a user belongs to.
@
@ get, show, view, my
@ groups, group names



### User - Update Password

<cb>passwd <v>user_name<><>


Updates a user's password.

You will be prompted for a new password.
@
@ user's, update, new, change, set
@ passwd



### User - Update Password - Current User

<cb>passwd<>


Change the password for the current user.

The system will prompt for a new password.
@ 
@ my, update, new, change, set
@ passwd



### Users - List All

<cb>cat /etc/passwd<>

Formatted:

<cb>cut -d: -f1 /etc/passwd<>


Lists all users on the system.

Displays the user names.
@
@ get, show, view
@ cut, -d, -f1 passwd, /etc/passwd



# User Groups
@
@ group-only, groups-only, user-group-only, user-groups-only


### User Group - Create

<cb>groupadd <v>group_name<><>


Adds a new user group.
@
@ new
@ groupadd



### User Group - Delete

<cb>groupdel <v>group_name<><>


Deletes an existing user group.
@
@ remove
@ groupdel



### User Groups - List All

<cb>cat /etc/group<>

Formatted:

<cb>cut -d: -f1 /etc/group | sort<>

MacOS:

<cb>dscacheutil -q group<>


Lists all user group on the system.
@
@ show, view, get
@ /etc/group, /group, group
@ dscacheutil



# Rsync
@
@ rsync-only


### Rsync Command

<cb>rsync <s>[<> <v>options<> <s>]<> <v>source_dir<> <v>target_parent_dir<><>

Mirror Directory:

<cb>rsync -avE --delete <v>source_dir<>/ <v>target_parent_dir<>/<>

With Identity File:

<cb>rsync -i <v>identity_file_path<> <v>...<><>


Options:

<in 2><table><col><c>-a<><><col>archive (same as -rlptgoD)<>
<col><c>-D<><><col>Same as --devices --specials<>
<col><c>-E<><><col>copy extended attributes<>
<col><c>-g<><><col>preserve groups<>
<col><c>-i<> <v>file<><><col>login with identity file<>
<col><c>-l<><><col>copy symlinks as symlinks<>
<col><c>-o<><><col>preserve owner<>
<col><c>-p<><><col>preserve permissions<>
<col><c>-r<><><col>recursive<>
<col><c>-t<><><col>preserve times<>
<col><c>-v<><><col>verbose<>
<col> <>
<col><c>-—exclude <v>file<> | <v>wildcard<><><><col>exclude this/these files (wild cards ok but finicky).<>
<col> <>
<col><c>--delete<><><col>delete extraneous files.<>
<col><c>--devices<><><col>preserve device files (super user only).<>
<col><c>--ignore-errors<><><col>continues copying other files if a file has an error.<>
<col><c>--specials<><><col>preserve special files.<>
<col><c>--version<><><col>show current version.<><><>
@
@ identity file


### Rsync - To Remote System

<cb>rsync <v>...<> <v>source_dir<>/ <v>user_name<>@<v>host<>:<v>target_dir<>/<>

Mirror Directory:

<cb>rsync -avE --delete <v>source_dir<>/ <v>user_name<>@<v>host<>:<v>target_dir<>/<>

Duplicates the directory <c><v>source_dir<><> on your computer to the directory <c><v>target_dir<><> on the remote system.
It will update and delete files as necessary.
@
@ sync, device



### Rsync - From Remote System

<cb>rsync <v>...<> <v>user_name<>@<v>host<>:<v>source_dir<>/ <v>target_dir<>/<>

Mirror Directory:

<cb>rsync -avE --delete <v>user_name<>@<v>host<>:<v>source_dir<>/ <v>target_dir<>/<>

Duplicates the directory <c><v>source_dir<><> on the remote system to the directory <c><v>target_dir<><> on your local computer.
It will update and delete files as necessary.
@
@ sync, device



# sed

An editor without an interface.

sed = stream editor


Operations:

<*>Match / Select Text
Substitute Text
Add Line
Delete Line<>
@
@ stream editor
@ sed-only



### sed - File Line - Add

<cb>sed '/<v>match<>/a'<>

Usage:

<cb>sed '/<v>match<>/a' <v>source_file<> > <v>target_file<><>

<cb><v>...<> | sed '/<v>match<>/a'<>


Add a line after a matching line.
@
@ insert, append, file
@ /a



### sed - File Line - Delete

<cb>sed '/<v>match<>/d'<>

Usage:

<cb>sed '/<v>match<>/d' <v>source_file<> > <v>target_file<><>

<cb><v>...<> | sed '/<v>match<>/d'<>


Delete the matching line.
@
@ delete, file
@ /d



### sed - File - View Line Range - Include Line Numbers

<cb>sed -n '<v>start<>,<v>end<>p'<>


Prints (includes) only those lines starting on line <c><v>start<><> ending on line <c><v>end<><>.

The first line is line 1.
'p' is a command and tells sed to print these lines.


-n	quiet mode
p	Print Lines (Command)


Print First 3 Lines:

<cb>sed -n '1,3p' <v>source_file<> > <v>target_file<><>
@
@ filter, file, -n, p



### sed - File - Replace Text

<cb>sed 's/<v>match<>/<v>replacement<>/'<>

<cb>sed 's/<v>match<>/<v>replacement<>/g'<>

Usage:

<cb>sed 's/<v>match<>/<v>replacement<>/' <v>source_file<> > <v>target_file<><>


Reads the contents of a file and replaces matching text with the replacement text.


Options:

<in 2><t><c>s/<><|>Substitute (replace) (required)
<c>/g<><|>Update All Matches, Not Just First<><>
@
@ substitute, file, contents
@ s/



### sed - File - Replace Text In Place

<cb>sed -i 's/<v>match<>/<v>replacement<>/' <v>file_name<><>


Replaces matching text of a file with the replacement text inside that file.


Options:

<in 2><t><c>-i<><|>Inline Replace (update the original file)

<c>s/<><|>Substitute (replace) (required)
<c>/g<><|>Update All Matches, Not Just First<><>
@
@ substitute, file, text, contents
@ s/



### sed - Replace Text

<cb>| sed 's/<v>match<>/<v>replacement<>/'<>

Usage:

<cb><v>...<> | sed 's/<v>match<>/<v>replacement<>/'<>


Replaces matching text with the replacement Text.


Example:

<cb>echo "your_name_here" | sed 's/<v>your_name_here<>/John Doe/'

<#># Prints: John Doe<><>
@
@ substitute, file
@ s/



### sed - Replace Text - Using Regex

<cb>sed -e 's/<v>match_regex<>/<v>replacement<>/g'<>


Replaces matching text with the replacement value.


Options:

<in 2><table><col><c>-e<><><col>Use Regular Expression<>
<col> <><col><c>s/<><><col>Substitute (replace)<>
<col><c>/g<><><col>Update All Matches, Not Just First<><><>


Example:

<cb>echo "your_name_here" | sed 's/<v>your_name_here<>/John Doe/'

<#># Prints: John Doe<><>
@
@ substitute, file, regular expression, output
@ s/, -e



# SSH
@
@ secure ftp, ssh-only, terminal


### SSH

<cb>ssh <v>user_id<>@<v>server_url<><>

<cb>ssh -i <v>server_pem_file<> <v>user_id<>@<v>server_url<><>


Creates a secure terminal connection to a server.


Options:

<in 2><table><col><c>-v<><><col>Verbose Mode<>
<col><c>-i <v>pem_file<><><><col>Use a pem (identity) file.<><><>



### SSH - Key - Create Public / Private Key

<cb>ssh-keygen -t rsa -b 4096 -C "<v>user<>@<v>host<>"<>

<c><v>user<><>	Use your local user id.
<c><v>host<><>	Use your local host name.


Creates an identity key that can be use to securely identify you on other machines.

Use for password-less logins.

Use the user id as <c><v>user<><> and your computer's domain name as <c><v>host<><>.
Accept defaults.
Passphrase not required. Skip by pressing enter.


Creates These By Default:

<cb>$HOME/.ssh/id_rsa
$HOME/.ssh/id_rsa.pub<>
@
@ ssh-keygen, openssl, password-less login, passwordless



### SSH - Key - Send Public Key To Server

<cb>ssh-copy-id "<v>server_user<>@<v>server_host<>"<>

Shares the current user's public identity key with the server.
The server will ask for the server's user id to authenticate.
The server then saves the public key.

Should enable password-less login.
@
@ ssh-copy-id, password-less login, passwordless



### SSH - Setup Password-less Login

From the client computer:

<card>Create Public / Private SSH Key
(ssh-keygen)

Send Public Key To Server Computer
(ssh-copy-id)

Test
(ssh user@server_ip_address)<>


Allows the client computer to log into the server computer without a password.


Troubleshooting:

Getting errors with: "Matching host key"?
Edit <c>known_hosts<> and remove the offending line.

<cb>vi .ssh/known_hosts<>
@
@ passwordless
@ ECDSA error ip key, differs



# Zip
@
@ zip-only



### Zip - Compress 

<cb>zip -r <v>zip_file<> <v>folder_to_compress<>
zip <v>zip_file<> <v>file1<> <v>file2<> <v>...<>
zip <v>zip_file<> <v>files<> -x <v>files_to_exclude<><>


Creates a zip file for a directory or for multiple files.

Options:

<in 2><table><col><c>-r<><><col>Search recursively for files to include.<>
<col><c>-P <v>password<><><><col>Sets a password.<>
<col><c>-x <v>files<><><><col>Exclude files<><><>



### Zip - Compress Directory

<cb>zip -r <v>zip_file<> <v>directory_name<><>


Creates a zip file for a directory.

The directory and all it's files are zipped.
Includes subdirectory files.

The path to the zipped files is the same as the relative path from where the command is executed.
@
@ folders, recursive
@ zip, -r



### Zip - Compress Files

<cb>zip <v>zip_file<> <v>file_name<><>

<cb>zip <v>zip_file<> <v>file_1<> <v>file_2<> <v>...<><>


Creates a zip file for one or more files.


The path to the zipped files is the same as the relative path from where the command is executed.



### Zip - Compress - Exclude Files

<cb>zip <v>zip_file<> <v>...<> -x <v>file_name<><>

<cb>zip <v>zip_file<> <v>...<> -x <v>file_1<> <v>file_2<> <v>...<><>


Creates a zip file for one or more files.


The path to the zipped files is the same as the relative path from where the command is executed.
@
@ -x



### Zip - Compress - Add Password

<cb>zip -P <v>password<> <v>...<>

zip -r <v>zip_file<> <v>file1<> <v>file2<> <v>...<>
zip -r <v>zip_file<> <v>files<> -x <v>files_to_exclude<><>


Creates a zip file for 

Options:

<c>-P <v>password<><>	Sets a password.



### Zip - Unzip

<cb>unzip <v>zip_file<><>


Unzips the contents of a zip file into the current directory.
@
@ Uncompress



### Zip - Unzip to Target Directory

<cb>unzip <v>zip_file<> -d <v>target_directory<><>


Unzips the contents of a zip file to a directory
@
@ Uncompress



### Zip - View Contents

<cb>zipinfo <v>zip_file<><>


Shows the contents of a zip file.



# Command Prompt
@
@ prompt-only, terminal, ps1, ps1=


### Command Prompt - Set

<cb>PS1="<v>prompt text<>"<>


Sets the terminal prompt.



## Command Prompt - Code Basics

<cb>PS1="<v>prompt text<>"<>


Options:

<in 2><table><col><c>\\\\<><><col>\\ (backslash)<>
<col><c>\\@<><><col>Time HH:MM AM/PM<>
<col><c>\\A<><><col>Time HH:MM<>
<col><c>\\d<><><col>Date "Mon Jan 01"<>
<col><c>\\e<v>...<><><><col>ASCII Escape Character<>
<col><c>\\h<><><col>Host Name Up To '.'<>
<col><c>\\H<><><col>Host Name<>
<col><c>\\j<><><col>Number of Shell Jobs<>
<col><c>\\n<><><col>Newline<>
<col><c>\\s<><><col>Shell Name<>
<col><c>\\t<><><col>Time H:MM:SS AM/PM<>
<col><c>\\T<><><col>Time HH:MM:SS<>
<col><c>\\u<><><col>User Name<>
<col><c>\\V<><><col>Bash Version and Patch Level<>
<col><c>\\v<><><col>Bash Version<>
<col><c>\\w<><><col>Full Current Path<>
<col><c>\\W<><><col>Current Directory Only (Not Full Path)<><><>

Display:

<in 2><table><col>\\ (backslash)<><col><c>\\\\<><>
<col>Bash Version<><col><c>\\v<><>
<col>Bash Version and Patch Level<><col><c>\\V<><>
<col>Current Directory Only (Not Full Path)<><col><c>\\W<><>
<col>Date "Mon Jan 01"<><col><c>\\d<><>
<col>Escape ASCII Character<><col><c>\\e<v>...<><><>
<col>Full Current Path<><col><c>\\w<><>
<col>Host Name<><col><c>\\H<><>
<col>Host Name Up To '.'<><col><c>\\h<><>
<col>Newline<><col><c>\\n<><>
<col>Number of Shell Jobs<><col><c>\\j<><>
<col>Shell Name<><col><c>\\s<><>
<col>Time H:MM:SS AM/PM<><col><c>\\t<><>
<col>Time HH:MM<><col><c>\\A<><>
<col>Time HH:MM AM/PM<><col><c>\\@<><>
<col>Time HH:MM:SS<><col><c>\\T<><>
<col>User Name<><col><c>\\u<><><><>
@
@ format, options, display, show, codes, special characters



## Command Prompt - Code Details
@
@ set, add, codes, special characters


### Prompt - Set \\ (backslash)
<cb>\\\\<>

<cb>PS1=\\\\<>

Adds a \\ (backslash) to the command prompt.
@
@ \\\\



### Prompt - Set Bash Version
<cb>\\v<>

<cb>PS1=\\v<>

Sets the prompt to the Bash version.
@
@ \\v



### Prompt - Set Bash Version and Patch Level
<cb>\\V<>

<cb>PS1=\\V<>

Sets the prompt to the Bash version and patch level.
@
@ \\V



### Prompt - Set Current Directory Only
<cb>\\W<>

<cb>PS1=\\W<>

Sets the prompt to the current directory name only (not full path).
@
@ \\W



### Prompt - Set Date "Mon Jan 01"
<cb>\\d<>

<cb>PS1=\\d<>

Sets the prompt to the date format "Mon Jan 01".
@
@ \\d



### Prompt - Set Escaped ASCII Character
<cb>\\e<v>...<><>

<cb>PS1=\\e<v>...<><>
@
@ \\e



### Prompt - Set Full Current Path
<cb>\\w<>

<cb>PS1=\\w<>

Sets the prompt to the full current path.
@
@ \\w, current path



### Prompt - Set Host Name
<cb>\\H<>

<cb>PS1=\\H<>

Sets the prompt to the server's host name.
@
@ \\H, server



### Prompt - Set Host Name Up To '.'
<cb>\\h<>

<cb>PS1=\\h<>

Sets the prompt to the host name up to the '.' in the name.
@
@ \\h



### Prompt - Set Newline
<cb>\\n<>

<cb>PS1=\\n<>

Adds a newline to the prompt.
@
@ \\n



### Prompt - Set Number of Shell Jobs
<cb>\\j<>

<cb>PS1=\\j<>

Shows the current number of shell jobs in the prompt.
@
@ \\j



### Prompt - Set Shell Name
<cb>\\s<>

<cb>PS1=\\s<>

Sets the prompt to the shell name.
@
@ \\s



### Prompt - Set Time H:MM:SS AM/PM
<cb>\\t<>

<cb>PS1=\\t<>

Sets the prompt to the time H:MM:SS AM/PM.
@
@ \\t



### Prompt - Set Time HH:MM
<cb>\\A<>

<cb>PS1=\\A<>

Sets the prompt to the time HH:MM.
@
@ \\A



### Prompt - Set Time HH:MM AM/PM
<cb>\\@<>

<cb>PS1=\\@<>

Sets the prompt to the time HH:MM AM/PM.
@
@ \\@



### Prompt - Set Time HH:MM:SS
<cb>\\T<>

<cb>PS1=\\T<>

Sets the prompt to the time HH:MM:SS.
@
@ \\T



### Prompt - Set User Name
<cb>\\u<>

<cb>PS1=\\u<>

Shows the user name in the command prompt
@
@ \\u


## Command Prompt - Examples
@
@ set


# Prompt - Set to Host Name, Current Path

<cb>PS1="\\h:\\w>"<>


Shows the host name, current path in the prompt.


Example Output:

<cb>Server-1:~/downloads><>
@
@ command, prompt-only, format, display, show
@ ps1, \\h, \\w



# How To
@
@ how-to, how-only, how-to-only


### Alias

<cb>alias <v>name<>=<v>command<><>

Alias to Multiple Commands:

<cb>alias <v>name<>='<v>command; command;...<>'<>


Creates an alias for a command.


Example:

<cb>alias <v>home<>="cd '$HOME'"

<v>home<><>



### Alias - With Embedded Variables

<cb>alias <v>name<>='<v>...<> $<v>variable_name<> <v>...<>'<>


Creates an alias that uses embedded variables.

Use '' (single quotes) to wrap the entire command.
The variables will be referenced when the alias is executed.



### ASCII Table - View

<cb>man ascii<>



### Bash - Start

<cb>/usr/bin/env bash<>

<cb>/bin/bash<>


Starts a new bash shell.
@
@ run



### Bash - Version

Long Format:

<cb>bash --version<>

Formatted like '4.2.8(1)-release':

<cb>echo $BASH_VERSION<>

Formatted like '4.2.8':

<cb>echo ${BASH_VERSION%%[^0-9.]*}<>
@
@ get, find, show, which, shell
@ --version, $BASH_VERSION



### Calendar - View Current Month, Year

<cb>cal<>

Prints a mini calendar of the current month and year.

Example:

<cb>> cal
<#>    January 2001
Su Mo Tu We Th Fr Sa
    1  2  3  4  5  6
 7  8  9 10 11 12 13
14 15 16 17 18 19 20
21 22 23 24 25 26 27
28 29 30 31<><>
@
@ print, show, view


### Calendar - View Month, Year

<cb>cal <v>month<> <v>year<><>

Prints a mini calendar of the given month and year.

Month and year should be numbers.
On some systems, the month can be text (eg: "feb").

Example:

<cb>> cal 1 2001
<#>    January 2001
Su Mo Tu We Th Fr Sa
    1  2  3  4  5  6
 7  8  9 10 11 12 13
14 15 16 17 18 19 20
21 22 23 24 25 26 27
28 29 30 31<><>
@
@ print, show, view



### Calendar - View Year

<cb>cal <v>year<><>

Prints a mini calendar for the entire year.
@
@ print, show, view



### Command - Trace / Show Execution

<cb>set -x<>

Or

<cb>set -o xtrace<>


These are equivalent.
@
@ echo, print, debug, log, display, commands
@ debug-only, debugger, debugger-only



### Command - Show Help

<cb>man <v>command<><>


Shows the man page for a command.

Press Q to exit.
@
@ view, get, display
@ man pages
@ man



### Command - Redirect Output to Parameter

<cb><v>command_2<> "$(<v>command_1<>)"<>


Redirects the output of command 1 as a parameter into command 2.
@
@ get, pass from, as parameter
@ "$()", $()



### Command - Trace / Show Execution - Disable

<cb>set +x<>

Or

<cb>set +o xtrace<>
@
@ echo, print, debug, log, display, commands
@ debug-only, debugger, debugger-only



### Computer - Uptime

<cb>uptime<>

Shows how long the computer has been running.
@
@ show, view, see, lookup, get



### Conditionally Execute Command - And

<cb>[[ <v>expression<> ]] && <v>command<><>


Executes command when the expression is true.

Uses Bash's short-circuiting to prevent running the command when the expression is false.
@
@ on condition, run, true
@ [], [[]], &&



### Conditionally Execute Command - Or

<cb>[[ <v>expression<> ]] || <v>command<><>


Executes command when the expression is false.

Uses Bash's short-circuiting to prevent running the command when the expression is false.
@
@ on condition, run, false
@ [], [[]], ||



### CPU Architecture - Get

<cb>uname -p<>

Returns the CPU type.

Sample CPUs:

<card>arm			<#># Apple Silicon<>
i386		<#># Intel Architecture on Mac<>
x86_64		<#># Intel Architecture<><>


Test For Architecture:

<card>if [[ $(uname -p) == '<v>arm<>' ]]; then
	echo "Arm Based System
fi<>
@
@ processor type, computer, server, intel, apple silicon
@ uname -p
@ arm, i386, x86_64



### CPU Type - Get

<cb>uname -m<>


Returns the CPU type.


Sample CPUs:

<card>aarch64		<#># Arm V8 / Raspberry Pi<>
arm64		<#># Apple Silicon<>
arm6l		<#># Arm V6 / Raspberry Pi<>
x86_64		<#># Intel x86 64<><>


Test For CPU Type:

<card>if [[ $(uname -m) == '<v>arm64<>' ]]; then
	echo "M1 Mac"
fi<>
@
@ processor name, computer, server, apple silicon, m1, m2, m3, intel, x86, raspberry pi
@ uname -m
@ aarch64, arm64, arm6l, x86_64



### Current User - Get

<cb>=$USER<>

<cb>logname<>


Shows the name of the current user.

logname will display the current user in standard out.
@
@ show, display, get
@ logname, $USER


### Device - Is Mounted?

<cb>-d <v>device_path<><>

Usage:

<cb>if [[ -d <v>file_name<> ]] <v>...<><>


Returns true if the path to the device exists.

Use a directory test to test if a device is mounted.
@
@ -d



### Device - Not Mounted?

<cb>! -e <v>device_path<><>

Usage:

<cb>if [[ ! -e <v>file_name<> ]] <v>...<><>


Returns true if the device path does not exist.

Use a directory test to test if a device is not mounted.
@
@ !, -e



### Devices - List Block Level Devices

<cb>lsblk<>


Shows all block level devices.
@
@ show, get, view
@ lsblk



### Devices - List Mounted

<cb>mount<>


Shows all mounted devices.
@
@ show, get, view
@ mount



### Devices - List USB

<cb>lsusb<>


List all USB devices.

Not supported on all versions of Linux.
@
@ show, get, view
@ lsusb



### Drive - Size, Free Space

<cb>df -h <v>drive_path<><>


Lists all drives and how much free space they have.


<c>-h<>		Human Readable
<c>-k<>		Space in Kilobytes
<c>-g<>		Space in Gigabytes
@
@ disk, disc
@ df -h



### Drive - Mount

<cb>diskutil mount /Volumes/<v>mount_name<><>

Mount Windows Network Drive:

<cb>mount -t smbfs //<v>server<>/<v>drive<> /Volumes/<v>mount_name<><>


Mounts a drive.

MacOS only?
@
@ disk, disc
@ diskutil mount, mount, smbfs, -t



### Drive - Unmount

<cb>diskutil unmount /Volumes/<v>mount_name<><>


Unmounts a drive.

MacOS only?
@
@ disk, disc
@ diskutil unmount



### Drives - All - Size, Free Space

<cb>df -h<>


Lists all drives and how much free space they have.


<c>-h<>		Human Readable
<c>-k<>		Space in Kilobytes
<c>-g<>		Space in Gigabytes
@
@ disk, disc all
@ df -h



### Drives - All - List All

<cb>diskutil list<>


Lists all drives.

Not supported on all versions of Linux.
@
@ disk, disc
@ diskutil list



### Evaluate Variable Containing Command Substitution

<cb>eval echo "$<v>variable_1"<>





### Filter Results - Match Text

<cb><v>...<> | grep "<v>match_expression<>"<>


Uses grep to select the lines that match the match expression.


Regular Expression Syntax: <l regular_expressions>Regular Expressions SpeedSheet<>
@
@ regex, regular expressions
@ grep



### Filter Results - Not Containing Text

<cb><v>...<> | grep -v "<v>match_expression<>"<>


Uses grep to select the lines that do not match the match expression.


Regular Expression Syntax: <l regular_expressions>Regular Expressions SpeedSheet<>
@
@ regex, regular expressions
@ grep -v



### If - Has Parameter

<cb>if [[ -n "$1" ]]; then
	<v>...<>
else
	<v>...<>
fi<>

<cb>if [ ! -z "$1" ]; then
	<v>...<>
else
	<v>...<>
fi<>
@
@ a value, is set, is present



### If - No Parameter

<cb>if [[ -z "$1" ]]; then
	<v>...<>
else
	<v>...<>
fi<>
@
@ empty, not present, no value, not set, is missing



### If - Parameter Equals

<cb>if [[ "$1" == "<v>value<>" ]]; then
	<v>...<>
else
	<v>...<>
fi<>



### If - Has Variable

<cb>if [[ ! -z "$<v>variable1<>" ]]; then
	<v>...<>
else
	<v>...<>
fi<>



### If - No Variable

<cb>if [[ -z "$<v>variable1<>" ]]; then
	<v>...<>
else
	<v>...<>
fi<>



### If - Variable Equals

<cb>if [[ "$<v>variable1<>" == "<v>value<>" ]]; then
	<v>...<>
else
	<v>...<>
fi<>



### IFS - Set

<cb>IFS = '<v>new_characters<>'<>


Changes the IFS delimiter characters.


Example:

<cb>IFS="\\n"<>

<cb><v>old_ifs<>="$IFS"
IFS=","

echo "${<v>dict_1<>[*]}"

IFS="$<v>old_ifs<>"<>
@
@ update, change, modify, delimiter



### FTP - SSH

<cb>sftp <v>user_id<>@<v>server.com<><>

With PEM File:

<cb>sftp -i <v>server_pem_file<> <v>user_id<>@<v>server.com<><>


Connects to an ftp server on the host.
@
@ remote, target, source, ftp, to server, host
@ send files to, receive files from
@ pem file, key, secure, identity
@ sftp, -i



### Input - From Script Lines

<cb><v>command<> \<\<<v>SECTION_TERMINATOR_NAME<>
<v>input...<>
<v>SECTION_TERMINATOR_NAME<><>


'<c>\<\<<>' = Redirect Input Operator


Example:

<cb>echo \<\<<v>ECHO_INPUT_END<>
Print this to the standard out.
<v>ECHO_INPUT_END<><>
@
@ Redirect Input, output, get



### Input - From User

<cb>read <v>value_1<><>

<cb>read -p "<v>caption:<> " <v>value_1<><>

Input stored in variable named '<c><v>value_1<><>'.

Add a space at the end of the caption for readability.
@
@ command line, command-line, console, enter text value, get
@ read -p



### Input - Password From User

<cb>read -s <v>value_1<><>

<cb>read -s -p "<v>caption:<> " <v>value_1<><>

Retrieves an input from the user. The input is not displayed.

Input stored in variable named '<c><v>value_1<><>'.

Add a space at the end of the caption for readability.
@
@ command line, command-line, console, enter text value, get
@ read -p, -s, silent, no



### Login - Silence Login Banner / Text

Create File:

<cb>~/.hushlogin<>

Command:

<cb>touch ~.hushlogin<>


<c>.hushlogin<> tells the shell to not display any standard text on login.
@
@ stop, touch



### Parameters - Loop Through

<cb>for <v>parameter<> in "$@" ; do
	<v>...<>
done<>
@
@ for each, arguments, params



### ls - Color - Use

<cb>ls --color=auto<>
@
@ --color, auto



### ls - Colors - Change

<cb>cp /etc/DIR_COLORS ~/.dir_colors
vi ~/.dir_colors<>

Set Directory Color:

<in 2><table><col>Find<><col><c>DIR 01;34<><>
<col>Change To	<><col><c>DIR 01;33<><><>
@
@ .dir_colors



### Memory - Allocation By Type

<cb>cat /proc/meminfo<>

Lists all memory types and how much is allocated to each.
@
@ swap file, cached, size, amount
@ see, show, view, display
@ /proc/meminfo



### Memory - View

<cb>free<>


Note: Not on MacOS.
@
@ see, show, view, display
@ system, computer, available, total
@ free



### Memory - View Used, Total, %

<cb>free -m | awk 'NR==2{printf "Memory Usage: %s/%sMB (%.2f%%)\\n", $3,$2,$3*100/$2 }'<>


Note: Not on MacOS.
@
@ see, show, view, display
@ system, computer, available, total
@ free


### Memory - System - Total

<cb>grep MemTotal /proc/meminfo | awk '{print $2}'<>
@
@ see, show, view, display



### Memory - System - Used

See script in help directory.

<!>May need to relook that one up. Doesn't work on the mac.<>

	- or -

<cb>free<>
@
@ see, show, view, display



### Network - Host Name - Public

<cb>curl -s "ipinfo.io" | grep -Eo '"hostname":.*?[^\\\\],' | sed 's/^.*: "//;s/",//'<>

Returns the public host name for the server.
@
@ system, device, internet, computer's, server's, my, get, show, view



### Network - IP Address - Local

<cb>hostname -I<>

Or

<cb>ip addr show<>

Or

<cb>sudo /sbin/ifconfig -a<>

	-a	// Show for multiple ip addresses.

Or

<cb>ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'<>


Lists the server's ip address.


Lists the local ip address.
One of these commands should work.
@
@ system, device, local, computer's, server's, my, get, show, view



### Network - IP Address - Public

<cb>curl -s "ipinfo.io" | grep -Eo '"ip":.*?[^\\\\],' | sed 's/^.*: "//;s/",//'<>


Returns the public facing ip address for the server.
@
@ system, device, internet, computer's, server's, my, show, view, get



### Network - List Local Devices

<cb>arp -a<>


Lists all local devices connected to the network.

Shows the ip addresses.
@
@ ip addresses, show, view, get
@ arp -a



### Network - List Open Ports

<cb>netstat -tupln<>

<cb>netstat -an | grep "LISTEN"<>


List all open ports on this computer.
@
@ netstat, show, view, get



### Network - Ping Server

<cb>ping <v>ip_address<>
ping <v>url<><>


Pings a server.

Displays the ping time.
Requires the ping service to be running on the target service.
@
@ time server, latency
@ tracert, traceroute, ip, address, url



### Network - Ping Server - n Times

<cb>ping -c <v>count<><v>ip_address<>
ping -c <v>count<><v>url<><>


Pings a server a set number of times.

Displays the ping time.
Requires the ping service to be running on the target service.
@
@ time server, latency -c, count, number
@ tracert, traceroute, ip, address, url



### Network - Port - Redirect

<cb>iptables -t nat -A PREROUTING -i eth0 -p tcp --dport <v>port_in<> -j REDIRECT --to-port <v>port_out<><>


Redirect a port from one number to another.
@
@ iptables



### Network - Test Connection

<cb>nc -zv <v>ip_address<> <v>port<><>

<cb>nc -zv <v>ip_address<> <v>port_1<> <v>port_2<><>

<cb>nc -zv <v>ip_address<> <v>port_range_start<>-<v>port_range_end<><>

<cb>nc -zv <v>ip_address<> <v>port_1<> <v>port_2<> <v>port_range_start<>-<v>port_range_end<><>


Tests if an IP address and port is reachable.

nc = netcat
@
@ nc, -z, -v, port, ip address, range, netcat



### Network - Test Port

<cb>nc -zv <v>ip_address<> <v>port_number<><>


Tests a port to see if it is reachable.
@
@ nc, -z, -v, netcat, ip address



### Network - Trace Route

<cb>traceroute <v>ip_address<>
traceroute<v>url<><>


Traces the route to a server.

Maps each server on the way along with the journey time.
@
@ time server, latency
@ tracert, traceroute, ip, address, url



### Noop / Do Nothing

<cb>:<>

Use '<c>:<>' to do nothing.

Use in empty functions.
@
@ no operation, pass
@ :



### Operating System - Name

<cb>uname<>

Returns the Operating System

Sample OSs:

<card>Darwin		<#>MacOs<>
Linux<>
@
@ get, view, show, display, computer
@ OS, uname



### Operating System - Name - From Variable

<cb>$OSTYPE<>

Returns the CPU type.

Sample OS:

<card>darwin22.0<>


Test For OS:

<card>if [[ $OSTYPE == 'darwin'* ]]; then
	<v>...<>
fi<>
@
@ get, view, show, display, computer
@ os, $OSTYPE, OSTYPE



### Operating System - Kernel - Version

<cb>uname -r<>
@
@ get, view, show, display, computer
@ os, uname -r



### Operating System - Version

<cb>hostnamectl<>

<cb>cat /etc/os-release<>

<cb>cat /etc/*-release<>

<cb>cat /proc/version<>


One of these will give you the OS version and details.
@
@ get, view, show, display, details, number, computer
@ os, hostnamectl, os-release



### Parameters - Expand To Variable

<cb>="$*"<>


Expands all parameters into a single value.
@
@ all, array
@ $*



### Pause - For Keypress

<cb>read -p "<v>Press any key to continue...<> " -n1 -s<>

Pause with Newline on Press:

<cb>read -p "<v>Press any key to continue... <>" -n1 -s; echo ""<>



### Pipe - To Variable

<cb><v>command<> | <v>...<> | (read $<v>pipe_name<>; <v>...<>)<>

Or

<cb><v>pipe_name<>=$(<v>command_1<> |  <v>...<>)<>


Prefer the first form.



### Screen - Clear

<cb>clear<>


Clears the screen and puts the cursor at the top of the window.
@
@ clean, wipe, reset



### Script - Get Run Command

<cb>=$0<>


Returns the command used to run the script.

Includes the path to the script if included in calling the script.
@
@ command line, command-line, run
@ $0



### Script - Get Output

<cb><v>result<>="$(<v>script_file<>)"<>
@
@ capture, result, to variable, save, store



### Script - Run

<cb>bash <v>script_file<><>


Runs a bash script file.



### Script - Run in Current Environment

<cb>. <v>script_file<><>

<cb>source <v>script_file<><>


Runs a script file in the current shell environment.


If the shell is not Bash, then Bash specific commands will not work.
@
@ source



### Secure Copy - Send a File

<cb>scp <v>user_id<>@<v>server.com<> <c>local_file<> <c>destination_file<><>

With PEM File:

<cb>scp -i <v>server_pem_file<> <v>user_id<>@<v>server.com<> <c>local_file<> <c>destination_file<><>


Securely sends a file to a remote server.


Include full paths for both the local and destination file.
@
@ remote, target, source, ftp, to server, host
@ pem file, key, identity
@ scp, -i



### Shell - Get Default Shell

<cb>which $SHELL<>


Shows the default shell that will run when starting a new shell environment.

Shows the path to the actual shell.
@
@ show, get, find, which, name
@ bash, zsh, sh
@ $shell



### Shell - Get Running Shell

<cb>ps -ocomm= $$<>

Shows the current shell.


Example Results:

<cb>bash
-zsh<>
@
@ show, get, find, which, current, process, name
@ bash, zsh, sh
@ $shell, $$



### Shell - Get Process ID

<cb>$$<>

Usage:

<cb>echo $$<>


Returns the current process id.
@
@ current
@ $$



### Sleep

<cb>sleep <v>seconds<><>

<cb>sleep <v>length<><v>unit<><>

Pauses execution for the given time.


Examples:

Sleep 1.5 Seconds:

<cb>sleep 1.5<>

Sleep 2 Minutes:

<cb>sleep 2m<>
@
@ pause



### su - Switch User

<cb>su <v>user_id<><>


Switches to a different user's identity.

SU = Substitute User.
@
@ change, switch to, use, different, user identity



### su - Switch To Root

<cb>su<>


Switch to the root user.

Use <c>su<> with no options to switch to root.
@
@ change, switch to, use



### sudo - Run Command

<cb>sudo -u <v>user_id<> <v>command<><>


Executes a command as another user.

SUDo = Substitute Do.
@
@ execute, as user



### sudo - Run Command - As Root User

<cb>sudo <v>command<><>


Runs a command as the root user.
@
@ execute, as user



### sudo - Run Previous Command

<cb>sudo -u <v>user_id<> !!<>

As Root:

<cb>sudo !!<>


Executes the previous a command as the root user.
@
@ execute, as user
@ !!



### System - Info

<cb>vmstat <v>length<> <v>count<><>

System information, free memory, cpu usage for a given length of time.



### System - IO Info

<cb>iostat <v>length<> <v>count<><>

IO information, cpu usage for a given length of time.



### Tar - Untar

<cb>tar xzf <v>file_name<>

tar xzf <v>file_name<> -C <v>target_directory<><>

Extracts the contents of a tar file into a new directory.

The default directory has the same name as the file without the extension.


Options:

<card><table><col><c>f<><><col>Use filename as input<#><super>1<><>.<>
<col><c>v<><><col>Verbose.<>
<col><c>x<><><col>Extract<#><super>2<><>.<>
<col><c>z<><><col>Extract through gZip. 1<>
<col><c>-C <v>target_directory<><><><col>Expand to <c>target_directory<>.<><><>

1 - Needs to be last option.
2 - Needs to be first option. Does not need a leading dash ('-').
@
@ tar, gzip, .gz, .tar



### Telnet

<cb>telnet <v>server<> [<v>port<>]<>


Telnets to a remote server.

Makes an unsecure connection.
@
@ host, zerver, port, connect to



### Terminal - Set the Backspace Key

<cb>stty erase <v>backspace_key<><>

Set Erase to the Backspace Key:

<cb>stty erase ^H<>


Sets the terminal backspace key.
@
@ erase, delete
@ stty erase, ^H



### Terminal - Set Timeout

Add to .bash_profile:

<cb>export TMOUT=<v>seconds<><>
@
@ time out
@ TMOUT



### Terminal - Show Settings

<cb>stty -a<>



### Variable - Set From File

<cb><v>variable_1<>="$(\< <v>file_name<>)<>""


Copies the contents of a file into a variable.
@
@ read file to
@ $(), $(\<), "$()", "(\<)"



### Web - Download / Curl

<cb>curl <v>http://site.com/page<><>

<cb>curl -O <v>file_name<> <v>http://site.com/page<><>


Downloads the web page or web file to the current directory.


Options:

<in 2><table><col><c>-O<><><col>Set File Name (Defaults to the page name)<><><>
@
@ url, link, web page, file, to
@ online



### Web - Download Page / Wget

<cb>wget <v>http://site.com/page<><>

<cb>wget -O <v>file_name<> <v>http://site.com/page<><>


Downloads the web page or web file to the current directory.


Options:

<in 2><table><col><c>-O<><><col>Set File Name (Defaults to the page name)<>
<col><c>-q<><><col>Quiet Mode<><><>
@
@ wget, url, link, web page, file
@ online



# Terminal Shortcuts
@
@ short cut, shortcuts-only, terminal, keyboard


### Shortcut - File - End of File

<cb>Ctrl + D<>
@
@ Control, Ctrl, d, close, end, complete



### Shortcut - Line - Start Of Line

<cb>Ctrl + A<>
@
@ Control, Ctrl, a, left, move cursor



### Shortcut - Line - End of File

<cb>Ctrl + D<>

(D for down)
@
@ Control, Ctrl, d, ^d, control, close, complete



### Shortcut - Line - End of Line

<cb>Ctrl + E<>

(E for end)
@
@ Control, Ctrl, control, ^e, e, right, move cursor



### Shortcut - Word - Left 1 Word (Back)

<cb>Alt + B<>

(B for back)

Mac:

<cb>Option ⌥ + Left Arrow<>
@
@ Alt, b, previous, back, move cursor



### Shortcut - Word - Right 1 Word (Forward)

<cb>Alt + F<>

(F for forward)

Mac:

<cb>Option ⌥ + Right Arrow<>
@
@ Alt, f, next, forward, move cursor



### Shortcut - Process - Stop

<cb>Ctrl + C<>
@
@ Control, Ctrl, c, kill, end



### Shortcut - Process - Suspend

<cb>Ctrl + Z<>
@
@ Control, Ctrl, z, pause



### Shortcut - Screen - Clear Screen

<cb>Ctrl + L<>
@
@ clean, wipe, reset
@ Control, Ctrl, l



# Symbol Reference
@
@ symbol-only, symbols-only, sym-only



### Symbol .

Run In Current Process

<cb>. <v>command<><>



### Symbol .

Current Directory

<cb>cd .<>



### Symbol ..

Parent Directory

<cb>cd ..<>



### Symbol ~

Home Directory

<cb>cd ~<>



### Symbol ./

Run From the Current directory

<cb>./<v>command<><>



### Symbol ?

File name wild card, single character.



### Symbol *

File name wild card, 1 or more characters.



### Symbol &

Run In Background.

<cb><v>command<> &<>



### Symbol &&

Run Only After 1st Completes Successfully

<cb><v>command_1<> && <v>command_2<><>



### Symbol |

Pipe Character.
Chains 2 or more statements together forwarding the standard output from one to the next.

<cb><v>statement_1<> | <v>statement_2<><>



### Symbol ||

Run command_2 Only If command_1 Returns an Error (Status > 0)

<cb><v>command_1<> || <v>command_2<><>



### Symbol |&

Pipe Character.
Chains 2 or more statements together forwarding the standard output and standard error from one to the next.

<cb><v>statement_1<> | <v>statement_2<><>



### Symbol :

Path separator.

<cb><v>path_1<>:<v>path_2<><>



### Symbol :

noop Command

<cb>:<>



### Symbol ;

Command Separator.

Used to run separate commands.

<cb><v>command_1<>; <v>command_2<><>



### Symbol ;;

Case clause terminator.



### Symbol [];

Logical expression evaluation (<c>[<v>...<>]<>) followed by the command terminator (<c>;<>).

Used to create single line <c>if<> <c>then<> statements.

<cb>if [ <v>expression<> ] ; then
	<v>...<>
fi<>
@
@ [, ];



### Symbol []

Evaluate an expression to true false.

<cb>if [ <v>expression<> ]
then
	<v>...<>
fi<>
@
@ [, ]



### Symbol [];

Evaluates a logical expression followed by a command.

The ';' is a command separator.

<cb>if [ <v>expression<> ]; then
	<v>...<>
fi<>
@
@ [, ];



### Symbol [[]]

Evaluate an expression to true false.

<cb>[[ <v>expression<> ]]<>

<cb>if [[ <v>expression<> ]] ; then
	<v>...<>
fi<>
@
@ [, ]



### Symbol ()

Defines a function.

<cb><v>function1<> () {
	<v>...<>
}<>
@
@ (, )



### Symbol ()

Runs a script inside it's own subshell.

<cb>(<v>command<>)<>
@
@ (, )


### Symbol ()

Defines an associative array.

<cb>items_1=(
	[<v>name<>]="<v>value<>"}
	[<v>name<>]="<v>value<>"}
	[<v>name<>]="<v>value<>"}
<>
@
@ {[]}




### Symbol (())

Evaluates an arithmetic expression.

<cb>if (( $<v>a<> < $<v>b<> )) {
	<v>...<>
}<>
@
@ ((, ))



### Symbol []

Defines or returns an associative array item name.

<cb>=<v>items_1<>[<v>name<>]<>



### Symbol [@]

Returns the elements from an array or associative array.
Returned as separate words.

<cb>=<v>items_1<>[@]<>



### Symbol [*]

Returns the elements from an array or associative array as a single word.
In the string, values are separated by the first character defined in <c>IFS<>.

<cb>=<v>items_1<>[*]<>



### Symbol \\

Escapes a character in a string.

<cb>echo "\\<v>!<>"<>



### Symbol \\0

The octal code for a character.

<cb>echo "\\0<v>141<>"<>



### Symbol \\u

The hex code of a unicode character (1-4 digits long).

<cb>echo "\\u<v>61<>"<>



### Symbol \\U

The hex code of a unicode character (1-8 digits long).

<cb>echo "\U<v>1F34C<>"<>



### Symbol \\x

The hex code for a character.

<cb>echo "\\x<v>61<>"<>



### Symbol $

Identifies an expression that evaluates to a value

<cb>$(<v>command<>)<>

<cb>$(( <v>arithmetic<> ))<>



### Symbol $

Identifies a variable. Prefixes the variable name.

<cb>$<v>variable<><>



### Symbol ${}

Itentifies a variable. Use when a variable name may be ambiguous.

<cb>${<v>variable<>}<>



### Symbol $$

The current process id (the process id of the shell).

<cb>=$$<>



### Symbol $[]

Evaluates a mathematical expression (<!>deprecated<>).

<cb><v>result<>=$[ <v>expression<> ]<>

Same As:

<cb><v>result<>=$(( <v>expression<> ))<>
@
@ $[, ]



### Symbol $()

Command Substitution (evaluate, then execute).

<cb>$(<v>expression<>)<>
@
@ $(, )



### Symbol $()

Runs a command and returns it's output as a parameter.

<cb><v>response<>=$(<v>command<>)<>

<cb><v>command_2<> $(<v>command_1<>)<>
@
@ $(, )



### Symbol $(())

Evaluates a mathematical expression.

<cb><v>result<>=$(( <v>expression<> ))<>

Same As:

<cb><v>result<>=$[ <v>expression<> ]<>
@
@ $((, ))



### Symbol $0

The name of the script.

Includes the path if used to call the command.

<cb>echo "Script Name / Path $<v>1<>"<>



### Symbol $1 $2 $3

Command line parameter or function parameters.

<cb>echo "First parameter $<v>1<>"<>



### Symbol $*

All command line parameters or all function parameters.

Spaces are considered parameter separators.

<cb>for <v>parameter<> in $*; do
	echo "Parameter: $<v>parameter<>"
done<>



### Symbol $@

All command line parameters or all function parameters.

Individual parameters can have spaces as values.

<cb>for <v>parameter<> in $@; do
	echo "Parameter: $<v>parameter<>"
done<>



### Symbol "$@"

All command line parameters or all function parameters.

Used when passing to a function to preserve values with white spaces.

<cb>count_values "$@"<>



### Symbol $?

The exit code returned from the last operation.

<cb><v>exit_code<>=$?<>



### Symbol $#

Parameter count.

<cb><v>number_of_parameters<>=$#<>



### Symbol #

Comment

<cb><#># This is a comment line<><>



### Symbol #!

Bash Script Identifier / Shebang.

Identifies the command needed to run the current file.
Must be the first line of the file.

<cb>#!/usr/bin/env bash<>



### Symbol !

Logical Not

<cb>if [[ ! $<v>value<> ]] <v>...<><>



### Symbol !!

Repeat the last command.

Works from the command-line only.



### Symbol *)

The default clause in a case statement.



### Symbol >

Output Redirect Operator

Redirects the standard output to a new file.
It will delete any pre-eisting file.

<cb><v>command<> > <v>file_name<><>



### Symbol >>

Output Append Redirect Operator

Redirects the standard output to an existing file.
It will create it if it doesn't exist.

<cb><v>command<> >> <v>file_name<><>



### Symbol >&1

Output Redirect Operator

Redirects to the the standard output (stdout).

<cb><v>command<> >&1<>



### Symbol >&2

Output Redirect Operator

Redirects to the the standard error (stderr).

<cb><v>command<> >&2<>



### Symbol \<

Input Redirect Operator

Reads the contents of a file or device as the standard in for a command.

<cb><v>command<> \< <v>file_name<><>



### Symbol \<\<

Input Redirect Operator / Stream Literals

Redirects a block of text to the standard in.

<cb><v>command<> \<\<<v>LABEL
input
LABEL<><>



### Symbol \<\<\<

Input Redirect Operator / From Variable

Redirects a the value of a variable to the standard in.

<cb><v>command<> \<\<\< $<v>variable<><>


### Symbol -a

File exists? (file test operator)

<cb>-a <v>file_name<><>
@
@ file test operator



### Symbol -b

Is block special file? (file test operator)

<cb>-b <v>file_name<><>
@
@ file test operator



### Symbol -c

Is character special file? (file test operator)

<cb>-c <v>file_name<><>
@
@ file test operator



### Symbol -d

Is directory? (file test operator)

<cb>-d <v>file_name<><>
@
@ file test operator



### Symbol -e

File exists? (file test operator)

<cb>-e <v>file_name<><>
@
@ file test operator



### Symbol -ef

Same device and iNode number? (file comparison operator)

<cb><v>file_1"<> -ef <v>file_2"<><>
@
@ file comparison operator, compare



### Symbol -eq

Is equal? (comparison operator)

<cb><v>a<> -eq <v>b<><>
@
@ comparison operator, compare



### Symbol -f

Is regular file? (file test operator)

<cb>-f <v>file_name<><>
@
@ file test operator



### Symbol -G

Belongs to user's primary group? (file test operator)

<cb>-G <v>file_name<><>
@
@ file test operator



### Symbol -g

Is set-group-id set? (file test operator)

<cb>-g <v>file_name<><>
@
@ file test operator



### Symbol -ge

Greater than or equal? (comparison operator)

<cb><v>a<> -ge <v>b<><>
@
@ comparison operator, compare



### Symbol -gt

Is greater than? (comparison operator)

<cb><v>a<> -gt <v>b<><>
@
@ comparison operator, compare



### Symbol -h

Is symbolic link file? (file test operator)

<cb>-h <v>file_name<><>
@
@ file test operator



### Symbol -k

Is sticky bit set? (file test operator)

<cb>-k <v>file_name<><>
@
@ file test operator



### Symbol -L

Is symbolic link file? (file test operator)

<cb>-L <v>file_name<><>
@
@ file test operator



### Symbol -le

Less than or equal? (comparison operator)

<cb><v>a<> -le <v>b<><>
@
@ comparison operator, compare



### Symbol -lt

Is less Than? (comparison operator)

<cb><v>a<> -lt <v>b<><>
@
@ comparison operator, compare



### Symbol -n

Has the value a length greater than zero? (value test operator)

<cb>-n <v>a<><>
@
@ variable, value test operator



### Symbol -N

Modified since last read? (file test operator)

<cb>-N <v>file_name<><>
@
@ file test operator



### Symbol -ne

Not equal? (comparison operator)

<cb><v>a<> -ne <v>b<><>
@
@ comparison operator, compare



### Symbol -nt

Is file_1 newer than file_2? (file comparison operator)

<cb><v>file_1"<> -nt <v>file_2"<><>
@
@ file comparison operator, compare



### Symbol -O

Belongs to user's user id? (file test operator)

<cb>-O <v>file_name<><>
@
@ file test operator



### Symbol -ot

Is older than file 2, or doesn't exist but file 2 does? (file comparison operator)

<cb><v>file_1"<> -ot <v>file_2"<><>
@
@ file comparison operator, compare



### Symbol -p

Is named pipe? (file test operator)

<cb>-p <v>file_name<><>
@
@  file test operator



### Symbol -r

Is readable? (file test operator)

<cb>-r <v>file_name<><>
@
@  file test operator



### Symbol -S

Is inter-process socket? (file test operator)

<cb>-S <v>file_name<><>
@
@  file test operator



### Symbol -s

Is non-empty? (file test operator)

<cb>-s <v>file_name<><>
@
@  file test operator



### Symbol -u

Is set-user-id set? (file test operator)

<cb>-u <v>file_name<><>
@
@  file test operator



### Symbol -w

Is writable? (file test operator)

<cb>-w <v>file_name<><>
@
@  file test operator



### Symbol -x

Is executable? (file test operator)

<cb>-x <v>file_name<><>
@
@  file test operator



### Symbol -z

Is value unset or length 0? (value test operator)

<cb>-z <v>a<><>
@
@ variable, value test operator



### Symbol ^C

Cancel / Terminate
@
@ control + O, ctrl



### Symbol ^D

End of File (EOF)
@
@ control + O, ctrl



### Symbol ^H

Backspace
@
@ control + H, ctrl



### Symbol ^Z

Suspend
@
@ control + z, ctrl



# Reserved Words
@
@ keywords-only, keyword-only


### Reserved Words

List of reserved words in Bash:

<in><table><col><c>!<>			<><col>Not Logical Operator<>
<col><c>[[<><><col>Conditional Expression Prefix<>
<col><c>]<>]<><col>Conditional Expression Suffix<>
<col><c>{<><><col>Defines Function Block or Variable<>
<col><c>}<><><col>Terminates Function Block or Variable<>
<col> <>
<col><c>case<><><col>Case Statement<>
<col><c>coproc<><><col>Creates an Interactive Background Process<>
<col><c>do<><><col>Defines a Block. Used By If, Until, and While Statements<>
<col><c>done<><><col>Defines a Block End<>
<col><c>elif<><><col>If Statement<>
<col><c>else<><><col>If Statement<>
<col><c>esac<><><col>Case Statement<>
<col><c>fi<><><col>If Statement<>
<col><c>for<><><col>For Statement<>
<col><c>function<><><col>Function Definition<>
<col><c>if<><><col>If Statement<>
<col><c>in<><><col>Case Statement<>
<col><c>select<><>
<col><c>then<><><col>If Statement<>
<col><c>time<><>
<col><c>until<><><col>Until Statement<>
<col><c>while<><><col>While Statement<><><>
@
@ reserved-words-only, reserved-only
@ case, coproc, do, done, elif, else, esac, fi, for
@ function, if, in, select, then, time, until, while
@ !, [[, ]], {, }



### Builtin Words

These are builtin words used by bash. You can use them for other purposes but probably shouldn't!

<in><c>.<>
<c>:<>
<c>[<>

<c>alias<>
<c>bg<>
<c>bind<>
<c>break<>
<c>builtin<>
<c>caller<>
<c>cd<>
<c>command<>
<c>compgen<>
<c>complete<>
<c>compopt<>
<c>continue<>
<c>declare<>
<c>dirs<>
<c>disown<>
<c>echo<>
<c>enable<>
<c>eval<>
<c>exec<>
<c>exit<>
<c>export<>
<c>false<>
<c>fc<>
<c>fg<>
<c>getopts<>
<c>hash<>
<c>help<>
<c>history<>
<c>jobs<>
<c>kill<>
<c>let<>
<c>local<>
<c>logout<>
<c>mapfile<>
<c>popd<>
<c>printf<>
<c>pushd<>
<c>pwd<>
<c>read<>
<c>readarray<>
<c>readonly<>
<c>return<>
<c>set<>
<c>shift<>
<c>shopt<>
<c>source<>
<c>suspend<>
<c>test<>
<c>times<>
<c>trap<>
<c>true<>
<c>type<>
<c>typeset<>
<c>ulimit<>
<c>umask<>
<c>unalias<>
<c>unset<>
<c>wait<><>
@
@ alias, bg, bind, break, builtin, caller, cd, command, compgen, complete, compopt, continue
@ declare, dirs, disown, echo, enable, eval, exec, exit, export, false, fc, fg, getopts, hash
@ help, history, jobs, kill, let, local, logout, mapfile, popd, printf, pushd, pwd, read
@ readarray, readonly, return, set, shift, shopt, source, suspend, test, times, trap, true
@ type, typeset, ulimit, umask, unalias, unset, wait
@ builtin-only, builtins-only, built-in, built-in-only, built-ins-only



# System Directories
@
@ sys-onyl, system-only, os-only, sys-dirs-only, sys-directories-only


## System Directories - Basics

<card><table><col><c>/dev<><><col>Devices<>
<col><c>/etc<><><col>Configuration Files<>
<col><c>/home<><><col>Users Directory<>
<col><c>/opt<><><col>Optional Applications Directory<>
<col><c>/proc<><><col>System Processes<>
<col><c>/sys<><><col>Kernel Information<>
<col><c>/usr<><><col>USR = Unix System Resource. Leave Alone<>
<col><c>/usr/local<><><col>Shared Applications, 3rd Party Apps<>
<col><c>/usr/share/zoneinfo<><><col>Server Supported Time Zones.<>
<col><c>/var<><><col>System & System Apps Changeable Data<>
<col><c>/var/run<><><col>Runtime Variable Data, PID files<>
<col> <>
<col><c>/home<><><col>Users Directory<>
<col><c>/home/<v>user_name<><><><col>User Home Directory<>
<col><c>~<><><col>Alias to User Home Directory<><><>
@
@ summary



## System Directories - Details



### System Directory - /dev

<cb>/dev<>

Devices.

All devices are accessible from the file system and mounted under this directory.



### System Directory - /etc

<cb>/etc<>

Configuration files.

(Pronounced: Et See)



### System Directory - /etc/init.d

<cb>/etc/init.d<>

Contains scripts for startup daemons.

(Deprecated on some systems (prefer systemd).
@
@ /etc/init.d, etc init.d



### System Directory - /etc/.profile.d
Use this to add items to the OS.

<m>(confirm)<>
@
@ /etc/.profile.d, etc .profile.d



### System Directory - /etc/ssh

<cb>/etc/ssh<>

Stores ssh configuration information.

Contains public and private keys.
@
@ public private keys



### System Directory - /home

<cb>/home<>

User data directory.

Each user has a subdirectory dedicated to them under <c>/home<>.



### System Directory - /opt

<cb>/opt<>

For optional software applications which are not part of the standard Linux distribution (web apps, etc.).



### System Directory - /proc

<cb>/proc<>

Provides information on running processes.



### System Directory - /sys

<cb>/sys<>

Provides information on the kernel.



### System Directory - /usr

<cb>/usr<>

USR = Unix System Resource. Used by distort packages. Leave alone.



### System Directory - /usr/local

<cb>/usr/local<>

Shared applications, 3rd party apps (java, etc.). Install shared apps here.



### System Directory - /usr/share/zoneinfo

<cb>/usr/share/zoneinfo<>

Server supported time zones.



### System Directory - /var

<cb>/var<>

Variable Data

Directory where the system & system installed apps stores changeable data (web servers, etc).



### System Directory - /var/apt

<cb>/var/apt<>

Logs for all items installed or updated on the system.



### System Directory - /var/run

<cb>/var/run<>

Runtime Variable Data, PID files.



# System Files
@
@ sys-onyl, system-only, os-only, sys-file-only, sys-files-only


### System File - /etc/hostname

<cb>/etc/hostname<>

The computer name.
@
@ computer name



### System File - /etc/groups

<cb>/etc/groups<>

Contains all system groups.
@
@ etc, user groups



### System File - /etc/machine-id

<cb>/etc/machine-id<>

The computer id.
@
@ computer id



### System File - /etc/passwd

<cb>/etc/passwd<>

Stores all system and user ids.

Includes user name, user id, startup directory.
@
@ system ids, user id, users



### System File - /etc/profile

<cb>/etc/profile<>

Base installed systemwide initialization file.

May be overwritten by OS updates.
@
@ initialization file, etc, profile



### System File - /etc/sysconfig/clock

<cb>/etc/sysconfig/clock<>

Stores the system timezone.
@
@ clock, timezone, sysconfig, etc



### System File - /proc/cpuinfo

<cb>/proc/cpuinfo<>

Shows all cpu information.



### System File - /proc/meminfo

<cb>/proc/meminfo<>

Shows all memory information.



# Shell Configuration Files
@
@ user-files-only, config-files-only, configuration-files-only
@ shell-files-only, bash-files-only, bash-config-only
@ bash, reference


## Shell Files - Basics

<card><table><col><c>~/.profile<><><col>Bourne Shell Initialization Script<><col><#>(Deprecated)<><>
<col><c>~/.bash_profile<><><col>Bash User Login Script<><col>(Login)<>
<col><c>~/.bashrc<><><col>Bash User Per-interactive-shell Startup Script<><col>("interactive", "non-login" shells only)<>
<col><c>~/.bash_logout<><><col>Bash User Logout Cleanup Script<>
<col><c>~/.inputrc<><><col>Bash User Readline Initialization Script<><><>
@
@ summary



## Shell Files - Details


### Shell File - ~/.profile

<cb>~/.profile<>

Deprecated

Bourne Shell initialization file.
Executed at login time. Bash will read this if found.
@
@ .profile



### Shell File - ~/.bash_profile

<cb>~/.bash_profile<>

Bash user initialization script file.
Executed at login time.
Calls <c>.bashrc<>
@
@ .bash_profile



### Shell File - ~/.bashrc

<cb>~/.bashrc<>

Bash user per-interactive-shell startup file.
Executed by "interactive" and "non-login" shells only.
@
@ .bashrc



### Shell File - ~/.bash_logout

<cb>~/.bash_logout<>

Bash user logout cleanup script.
@
@ .bash_logout



### Shell File - ~/.inputrc

<cb>~/.inputrc<>

Bash user readline initialization script file.
Readline is a library used by bash to configure command-line for things like key mappings or how command history is handled.
@
@ .inputrc



### Shell File - "Login" Shell Config Files

<cb>.login, .profile, .zlogin<>

Executed when logging in from another host.
Executed when opening a text console.
@
@ .login, .profile, .zlogin



### Shell File - "Interactive" Shell Config Files

<cb>.bashrc, .tcshrc, .zschrc...<>

Executed by shells connected to terminals or pseudo-terminals.
@
@ .bashrc, .tcshrc, .zschrc



# User Directories
@
@ reference, 


## User Directories - Basics

<card><table><col><c>/home<><><col>Users Directory<>
<col><c>/home/<v>user_name<><><><col>User Home Directory<>
<col> <>
<col><c>~<><><col>Alias to User Home Directory<><><>



## User Directories - Details


### User Directory - Home

<cb>/home/<v>user_home<>



# Application Directories, Files
@ 
@ reference, app-directories-only


### Application - Global Configuration

<card><table><col><c>/etc/<v>app_name<><><>
<col><c>/usr/share/<v>app_name<><><><col>Read Only, Independent of Machine<>
<col><c>/usr/lib/<v>app_name<><><><col>Read Only, Machine Specific<>
<col><c>/var/lib/<v>app_name<><><><col>Read / Write<><><>



### Application - User Configuration / User Data

<card><table><col><c>/home/<v>user_name<>/.config/<><>
<col><c>/home/<v>user_name<>/.config/<v>app_name<><><><><>



# Reference - shells
@
@ shells-only


### Shell - Bash

This is the most commonly installed and used shell.

It is 100% sh compatible but has lots of improvements over sh.



### Shell - Zsh

This is a powerful and popular shell that supports lots of customizations and has excellent command-line enhancements

It is 100% sh compatible.
It is very close in syntax to bash but not 100% compatible.



### Shell - Sh

This is the orginal Unix shell.

It is lightweight but has minimal features.
IT doesn't have great command-line support.

It can be found in embedded systems or minimal Linux distributions.



# Reference - Coming From Other Languages


### Dictionary, Map, Table

Use: <l "?q=associative-array-only">Associative Arrays<>
@
@ dicts, dictionaries, hashmaps, maps, hash table



### List

Use: <l "?q=array-only">Arrays<>
@
@ lists



### Switch, Match Statements

Use: <l "?q=case-only">Case<>



# Acronyms
@
@ Glossary, glossary-only
@ acronym-only, acronyms-only


### APT
Advanced Package Tool


### Bash
Bourne Again SHell.


### CD
Change Directory


### CWD
Current Working Directory


### FIFO
First In First Out (named pipes)


### ICP
Inter-process Communication (named pipes)


### IFS
Internal Field Separator


### NC
Netcat


### PS
Prompt String


### PWD
Print Working Directory


### RC
Run Command


### SCP
Secure Copy / Secure Copy Protocol


### SH
Shell


### SED
Stream Editor


### SSH
Secure Shell


### SSL
Secure Socket Layer


### SU
Substitute User


### SUDO
Substitute Do


### TSL
Transport Layer Security



# Terms
@
@ Glossary, glossary-only
@ terms-only, term-only



### Bash Script Identifier / Shebang
Identifies the command needed to run the current file.
Must be the first line of the file.

<cb>#!/usr/bin/env bash<>
@
@ #!



### Daemon
A program that runs in the background.

This is generally a system wide service with only one running instance. Traditionally daemon names end with the letter d. Typically the init process is the part of daemons.



### Exit Code
The value returned by a script or function.

All scripts and functions return a value between 0 and 127.
@
@ return, result



### Gorilla
Here is a gorilla  🦍



### init.d - Run Level
An integer that states the server state/configuration/level.

Run levels include Halt, Single User Mode, Multiuse Mode, Multiuse GUI Mode, Reboot. Numbers run from most simple level to most complex run mode. May be different for different flavors of Linux. Service startup/execution is tied to its run level to match the correct server state.



### init.d - RC Script
A script responsible for starting and stopping a service.

Must be placed in /etc/init or etc/rc.d/init.d folders.
Must take commands start, stop, restart, status.



### Inter-Process Communication (IPC)
See: Named Pipes



### Internal Field Separator (IFS)
Environment variable that defines the characters that Bash sees as field delimiters.

Any one of these characters will mark a separation in field values.
Can be changed by updating the variable <c>IFS<>.

Default values: <c>" \\t\\n"<> (space, tab, newline)



### Named Pipe / FIFO

A named pipe is a special file that allows for processes to communicate between each other (inter-process communication).

The processes can run in different memory spaces.
Communications are processed first in, first out.

Also Called: FIFO (first in first out)
@
@ named-pipe, fifo, ipc, named pipes, inter-process communication



### Service
An application that runs in the background waiting to be used or carries out essential tasks.



### stderr
Standard Error

All errors are sent to stderr by default.
You can redirect the standard out using redirect commands <c>2><>.
@
@ standard error



### stdin
Standard In

All inputs are directed to stdin in by default.
@
@ standard input



### stdout
Standard Out

All standard output are directed to stdout.
@
@ standard output




### Turing Complete
Bash is a Turing complete scripting language.


